import json

from aiogram.types import Message, CallbackQuery
from aiogram import F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import ChatMember
from aiogram.exceptions import TelegramForbiddenError
from aiogram.filters import ChatMemberUpdatedFilter, IS_NOT_MEMBER, MEMBER

from loader import base, techno_dict, dp, bot
from utils.users_router import users_router
from utils.user_bot_parser import check_paid
from states import ActorsState
from config import SUPPORT, CONTROL_GROUP, PUBLIC_CHANNEL
from keyboards.reply import main_menu_actor
from keyboards.inline_actors import (setup_keyboard, education_choice, paid_url,
                                     experience_choice, role_interested, button_for_casting)


@users_router.callback_query(F.data.startswith('origin_'))
async def get_origin_request(callback: CallbackQuery, state: FSMContext):
    """–õ–æ–≤–∏–º –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await callback.answer()
    # –ü–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ –∏–∑ 3 —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
    # ID –≤ –∫–∞–Ω–∞–ª–µ —Å–æ –≤—Å–µ–º–∏ –∫–∞—Å—Ç–∏–Ω–≥–∞–º–∏, username –∫–∞–Ω–∞–ª–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞, ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ –∏—Å—Ç–æ—á–Ω–∏–∫–µ
    msg_info = callback.data.replace('origin_', '').split('-')
    try:
        await bot.forward_message(
            chat_id=callback.from_user.id,
            from_chat_id=PUBLIC_CHANNEL,
            message_id=int(msg_info[0]))

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–±, –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞, –∏–¥—É—â–µ–º —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —á–∞—Ç–µ-–∏—Å—Ç–æ—á–Ω–∏–∫–µ, —Ç–æ –ø—Ä–æ–±—Ä–æ—Å–∏–º –∏ –µ–≥–æ
        await techno_dict['parser'].check_text_for_prob(
            origin_chat=msg_info[1],
            next_origin_message=(int(msg_info[2]) + 1),
            user_id=callback.from_user.id
        )
    except ValueError:  # –ï—Å–ª–∏ –Ω–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ, –∞ –î–í–ê
        msg_list = [int(i) for i in msg_info[0].split('&')]
        await bot.forward_messages(
            chat_id=callback.from_user.id,
            from_chat_id=PUBLIC_CHANNEL,
            message_ids=msg_list
        )
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–±, –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞, –∏–¥—É—â–µ–º —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —á–∞—Ç–µ-–∏—Å—Ç–æ—á–Ω–∏–∫–µ, —Ç–æ –ø—Ä–æ–±—Ä–æ—Å–∏–º –∏ –µ–≥–æ
        await techno_dict['parser'].check_text_for_prob(
            origin_chat=msg_info[1],
            next_origin_message=(msg_list[-1] + 1),
            user_id=callback.from_user.id
        )


# ====================
# –†–∞–±–æ—Ç–∞ —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
# ====================


@dp.chat_member(ChatMemberUpdatedFilter(member_status_changed=IS_NOT_MEMBER >> MEMBER))
async def catch_new_member(chat_member: ChatMember):
    """–ï—Å–ª–∏ –∞–∫—Ç–µ—Ä –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É, —Ç–æ –æ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–µ. –û—Ç–ª–æ–≤–∏–º —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ"""
    if chat_member.chat.id == CONTROL_GROUP:
        msg_text = ('–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞, —Å–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! –ü–æ—à–µ–ª –ø–æ–¥–±–∏—Ä–∞—Ç—å –¥–ª—è —Ç–µ–±—è –∫–∞—Å—Ç–∏–Ω–≥–∏. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥—É '
                    '–ø–æ–¥—Ö–æ–¥—è—â–∏–π, –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø—Ä–∏—à–ª—é –µ–≥–æ —Ç–µ–±–µ —Å—é–¥–∞. –ü–æ–¥–∞–≤–∞–π –∑–∞—è–≤–∫–∏ –∏ –ø–æ–ª—É—á–∞–π —Ä–æ–ª–∏!')
        msg_text_2 = """
<b>–ü–∞–º—è—Ç–∫–∞ –∞–∫—Ç—ë—Ä—É</b>

üëÅÔ∏è‚Äçüó®Ô∏è –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –ø—Ä–æ—Å–∏—Ç –∫–∞—Å—Ç–∏–Ω–≥-–¥–∏—Ä–µ–∫—Ç–æ—Ä. –°–æ–±–ª—é–¥–∞–π—Ç–µ —ç—Ç–∏–∫—É –æ–±—â–µ–Ω–∏—è, –∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞—è–≤–∫–∏ –Ω–æ—á—å—é.

üëÅÔ∏è‚Äçüó®Ô∏è –î–æ–±–∞–≤–ª—è–π—Ç–µ –∫–∞—Å—Ç–∏–Ω–≥–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å, –≤ ¬´–ò–∑–±—Ä–∞–Ω–Ω–æ–µ¬ª. –ß—Ç–æ–±—ã –∫ –Ω–∏–º –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–ª—É—á–∞–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Ä–æ–ª—å –∏ —É—Ç–æ—á–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è (–≥–æ–Ω–æ—Ä–∞—Ä, –¥–∞—Ç—ã –∏ —Ç.–¥.). –¢–∞–∫ –∂–µ —ç—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –æ—Ç—Å–ª–µ–¥–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø–æ–Ω—è—Ç—å –Ω–∞ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.

üëÅÔ∏è‚Äçüó®Ô∏è –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–≤–æ–∏ –∞–∫—Ç–µ—Ä—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (—Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ-–≤–∏–∑–∏—Ç–∫—É) —Ä–∞–∑ –≤ –ø–æ–ª –≥–æ–¥–∞. –¢–æ, –∫–∞–∫ –≤—ã –≤—ã–≥–ª—è–¥–∏—Ç–µ –≤ –≤–∞—à–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–º, –∫–∞–∫ –≤—ã –≤—ã–≥–ª—è–¥–∏—Ç–µ, –∫–æ–≥–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç–µ –ø—Ä–æ–±—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –µ—ë –∫–∞—Å—Ç–∏–Ω–≥-–¥–∏—Ä–µ–∫—Ç–æ—Ä—É.

üëÅÔ∏è‚Äçüó®Ô∏è –ï—Å–ª–∏ –≤–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç –º–∞–ª–æ –∫–∞—Å—Ç–∏–Ω–≥–æ–≤, ‚Äì –≤–Ω–µ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è /settings. –í—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª—å—à–µ —Ç–∏–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã, –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≥–æ–Ω–æ—Ä–∞—Ä.

üëÅÔ∏è‚Äçüó®Ô∏è –ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –º–Ω–æ–≥–æ –∑–∞—è–≤–æ–∫, –Ω–æ –≤–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç –º–∞–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, ‚Äì –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏–ª–∏ –¥–∞–∂–µ –ø–æ–º–µ–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ —Å—Ç–∏–ª—å. –ß–∞—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞–ª–µ–Ω—å–∫–æ–π –¥–µ—Ç–∞–ª–∏ –≤ –æ–±—Ä–∞–∑–µ –º–æ–∂–µ—Ç —Å–∏–ª—å–Ω–æ –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

üëÅÔ∏è‚Äçüó®Ô∏è –ú—ã —Å–æ–±–∏—Ä–∞–µ–º –¥–ª—è –≤–∞—Å –∫–∞—Å—Ç–∏–Ω–≥–∏ –≤ —Ç–æ–º —á–∏—Å–ª–µ –∏ —Å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –±—É–¥—Ç–µ –±–¥–∏—Ç–µ–ª—å–Ω—ã, –æ—Å—Ç–µ—Ä–µ–≥–∞–π—Ç–µ—Å—å –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤.
‚ö†Ô∏è –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ–±–Ω–∞–∂—ë–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –∏ –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∏ –ø–æ–¥ –∫–∞–∫–∏–º –ø—Ä–µ–¥–ª–æ–≥–æ–º. –¢–∞–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –≤ –ø—Ä–∞–∫—Ç–∏–∫–µ –∫–∏–Ω–æ–∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –±—ã—Ç—å –Ω–µ –º–æ–∂–µ—Ç.
–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–æ—Å–ª–µ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏, –≤–∞–º –ø—Ä–∏—à–ª–æ –Ω–µ–ø—Ä–∏–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, —Å—Ä–∞–∑—É –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É /support

üëÅÔ∏è‚Äçüó®Ô∏è –ú—ã —Ä–∞–∑–≤–∏–≤–∞–µ–º—Å—è –∏ –≤–Ω–µ–¥—Ä—è–µ–º –Ω–æ–≤—ã–µ –æ–ø—Ü–∏–∏, —á—Ç–æ–±—ã –≤–∞–º –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –Ω–∞—à –ø—Ä–æ–µ–∫—Ç, –ø–∏—à–∏—Ç–µ –Ω–∞–º, –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –≤–Ω–µ–¥—Ä–∏—Ç—å.

–ñ–µ–ª–∞–µ–º –≤–∞–º –±–æ–ª—å—à–∏—Ö –∫–ª–∞—Å—Å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ä–æ–ª–µ–π!

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏‚ù§Ô∏è
–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ Oh My Cast.
        """
        try:
            await bot.send_message(chat_id=chat_member.new_chat_member.user.id, text=msg_text)
            await bot.send_message(chat_id=chat_member.new_chat_member.user.id, text=msg_text_2, reply_markup=main_menu_actor)
        except TelegramForbiddenError:
            with open('msg_error.txt', 'a') as file:
                print(chat_member, file=file)


@users_router.message(Command('subscription'))
@users_router.message(F.text == '–ü–æ–¥–ø–∏—Å–∫–∞')
async def open_subscription_page(msg: Message):
    """–û—Ç–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ–ø–ª–∞—Ç–æ–π"""
    is_paid = await check_paid(msg.from_user.id)
    if is_paid:
        msg_text = '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞\n'
    else:
        msg_text = '–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏\n'

    await msg.answer((msg_text + '–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π:'), reply_markup=await paid_url(msg.from_user.id, is_paid))


@users_router.message(Command('support'))
async def get_support_contact(msg: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    await msg.answer(f'–°–æ –≤—Å–µ–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è —Å—é–¥–∞ {SUPPORT}')


# ====================
# –†–∞–±–æ—Ç–∞ —Å "–ò–∑–±—Ä–∞–Ω–Ω—ã–º"
# ====================

@users_router.callback_query(F.data.startswith('favorites_'))
async def add_to_favorites(callback: CallbackQuery):
    """–î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–∏–Ω–≥ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    await callback.answer()
    # –í—Å–µ –∫–∞—Å—Ç–∏–Ω–≥–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –≤–∏–¥–µ –æ–¥–Ω–æ–π –¥–ª–∏–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å —Ö—ç—à–∞–º–∏ –∫–∞—Å—Ç–∏–Ω–≥–æ–≤ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö
    # —Å–∏–º–≤–æ–ª–æ–º "&". –ü–æ —ç—Ç–æ–º—É, –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –±—É–¥–µ–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–æ–π ¬Ø\_(„ÉÑ)_/¬Ø
    user_favorites = (await base.get_actor_favorites(callback.from_user.id))[0]['favorites']
    # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–∑ –ë–î –≤–µ—Ä–Ω–µ—Ç—Å—è None
    new_favorite = callback.data.replace('favorites_', '')
    try:
        user_favorites = user_favorites.split('&')
        if new_favorite not in user_favorites:
            user_favorites.append(new_favorite)
            user_favorites = '&'.join(user_favorites)
            await base.set_actor_favorites(callback.from_user.id, user_favorites)
            await callback.message.answer('–ö–∞—Å—Ç–∏–Ω–≥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"')
        else:
            await callback.message.answer('–î–∞–Ω–Ω—ã–π –∫–∞—Å—Ç–∏–Ω–≥ —É–∂–µ –µ—Å—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!')
    except AttributeError:  # –í—ã—Å–∫–æ—á–∏—Ç –ø—Ä–∏ –ø—É—Å—Ç–æ–º "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
        await base.set_actor_favorites(callback.from_user.id, new_favorite)
        await callback.message.answer('–ö–∞—Å—Ç–∏–Ω–≥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"')


@users_router.message(Command('favorites'))
@users_router.message(F.text == '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ')
async def get_favorites_list(msg: Message):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    user_favorites = (await base.get_actor_favorites(msg.from_user.id))[0]['favorites']
    user_favorites = user_favorites.split('&')
    if len(user_favorites) > 0 and user_favorites != ['']:
        for c_hash in user_favorites:
            try:
                casting = (await base.get_casting(c_hash))[0]
                casting_data = json.loads(casting['casting_data'])
                msg_text = (f'<i>–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–∞—Å—Ç–∏–Ω–≥</i>\n\n'
                            f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:</b> {casting_data["project_name"]}\n'
                            f'<b>–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:</b> {casting_data["project_type"]}\n'
                            f'<b>–î–∞—Ç–∞ —Å—ä–µ–º–æ–∫:</b> {casting_data["filming_dates"]}\n')
                await msg.answer(msg_text, reply_markup=await button_for_casting(casting['origin_for_user'],
                                                                                 casting_hash_rm=c_hash))
            except Exception as e:  # –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∫–∞—Å—Ç–∏–Ω–≥–∞ –≤ –±–∞–∑–µ –±–æ–ª—å—à–µ –Ω–µ—Ç, —Ç–æ —É–¥–∞–ª–∏–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                if msg.from_user.id == 1004280953:
                    await msg.answer(str(e))
                # user_favorites.remove(c_hash)
                # user_favorites = '&'.join(user_favorites)
                await base.set_actor_favorites(msg.from_user.id, user_favorites)
                await msg.answer('–ö–∞—Å—Ç–∏–Ω–≥ –±—ã–ª —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!')

    else:
        await msg.answer('–í "–ò–∑–±—Ä–∞–Ω–Ω–æ–º" –ø—É—Å—Ç–æ!')


@users_router.callback_query(F.data.startswith('rm_favorites_'))
async def remove_favorite_casting(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ–º –∫–∞—Å—Ç–∏–Ω–≥ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    await callback.answer()
    # –í—Å–µ –∫–∞—Å—Ç–∏–Ω–≥–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –≤–∏–¥–µ –æ–¥–Ω–æ–π –¥–ª–∏–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å —Ö—ç—à–∞–º–∏ –∫–∞—Å—Ç–∏–Ω–≥–æ–≤ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö
    # —Å–∏–º–≤–æ–ª–æ–º "_". –ü–æ —ç—Ç–æ–º—É, –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –±—É–¥–µ–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–æ–π ¬Ø\_(„ÉÑ)_/¬Ø
    user_favorites = (await base.get_actor_favorites(callback.from_user.id))[0]['favorites']
    rm_favorites = callback.data.replace('rm_favorites_', '')
    try:
        user_favorites = user_favorites.split('&')
        if rm_favorites in user_favorites:
            user_favorites.remove(rm_favorites)
            user_favorites = '&'.join(user_favorites)
            await base.set_actor_favorites(callback.from_user.id, user_favorites)
            await callback.message.answer('–ö–∞—Å—Ç–∏–Ω–≥ —É–¥–∞–ª–µ–Ω –∏–∑ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"')
        else:
            await callback.message.answer('–ö–∞—Å—Ç–∏–Ω–≥ —É–∂–µ —É–¥–∞–ª–µ–Ω!')
    except Exception as e:  # –í—ã—Å–∫–æ—á–∏—Ç –ø—Ä–∏ –ø—É—Å—Ç–æ–º "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
        print(e)
        await callback.message.answer('–ö–∞—Å—Ç–∏–Ω–≥ —É–∂–µ —É–¥–∞–ª–µ–Ω!')


# ====================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
# ====================

# –°–ª–æ–≤–∞—Ä—å —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
dict_for_msg_build = {
        # –†–æ–ª–∏
        'films': '–ö–∞—Å—Ç–∏–Ω–≥–∏ –≤ –∫–∏–Ω–æ',
        'series': '–ö–∞—Å—Ç–∏–Ω–≥ –≤ —Å–µ—Ä–∏–∞–ª',
        'ads': '–ö–∞—Å—Ç–∏–Ω–≥–∏ –≤ —Ä–µ–∫–ª–∞–º—É',
        'theater': '–¢–µ–∞—Ç—Ä–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã',
        'main_role': '–ì–ª–∞–≤–Ω—ã–µ –∏ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏',
        'episode': '–≠–ø–∏–∑–æ–¥—ã',
        'mass': '–ì—Ä—É–ø–ø–æ–≤–∫–∞/–º–∞—Å—Å–æ–≤–∫–∞',
        'free': '–ù–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã / —Ñ–µ—Å—Ç–∏–≤–∞–ª—å–Ω—ã–µ –∫–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–Ω—ã–µ —Ñ–∏–ª—å–º—ã –º–æ–ª–æ–¥—ã—Ö —Ä–µ–∂–∏—Å—Å—ë—Ä–æ–≤',
        # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        'vuz': '–ü–æ–ª—É—á–∏–ª –¥–∏–ø–ª–æ–º. –≥–æ—Å. –æ–±—Ä–∞–∑—Ü–∞',
        'curs': '–ü—Ä–æ—à—ë–ª –∫—É—Ä—Å—ã –∞–∫—Ç–µ—Ä—Å–∫–æ–≥–æ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞',
        'none': '–ê–∫—Ç–µ—Ä—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–µ—Ç',
        # –û–ø—ã—Ç
        'null': '–û–ø—ã—Ç–∞ –Ω–µ—Ç, —è - –Ω–æ–≤–∏—á–æ–∫',
        'ads_': '–°–Ω–∏–º–∞–ª–∞—Å—å(—Å—è) —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∫–ª–∞–º–µ / –º–∞—Å—Å–æ–≤–∫–∞—Ö/–≥—Ä—É–ø–ø–æ–≤–∫–∞—Ö',
        'free_': '–°–Ω–∏–º–∞–ª–∞—Å—å(—Å—è) –≤ —ç–ø–∏–∑–æ–¥–∞—Ö / –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö',
        'main': '–ï—Å—Ç—å –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ / –≥–ª–∞–≤–Ω—ã–µ —Ä–æ–ª–∏ –≤ –ø–æ–ª–Ω–æ–º–µ—Ç—Ä–∞–∂–Ω—ã—Ö —Ñ–∏–ª—å–º–∞—Ö/—Å–µ—Ä–∏–∞–ª–∞—Ö',
        # –ü–æ–ª
        'male': '–ú—É–∂—Å–∫–æ–π',
        'female': '–ñ–µ–Ω—Å–∫–∏–π'
    }


@users_router.message(Command('settings'))
@users_router.message(F.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è')
async def open_acc_setup_menu(msg: Message, state: FSMContext):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    if msg.from_user.id in await base.get_users_id():
        actor_data = (await base.get_actor_info(msg.from_user.id))[0]
        msg_text = (f'–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:\n\n'
                    f'<b>–§–ò–û:</b> {actor_data["actor_name"]}\n'
                    f'<b>–ü–æ–ª:</b> {dict_for_msg_build[actor_data["sex"]]}\n'
                    f'<b>–í–æ–∑—Ä–∞—Å—Ç –ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É:</b> {actor_data["passport_age"]}\n'
                    f'<b>–ò–≥—Ä–æ–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:</b> {actor_data["playing_age"]}\n'
                    f'<b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b> {dict_for_msg_build[actor_data["education"]]}\n'
                    f'<b>–û–ø—ã—Ç:</b> {dict_for_msg_build[actor_data["have_experience"]]}\n'
                    f'<b>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ:</b> {actor_data["portfolio"]}\n'
                    f'<b>–°–æ—Ü. —Å–µ—Ç–∏:</b> {actor_data["social"]}\n'
                    f'<b>–¢–æ, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:</b> {", ".join([dict_for_msg_build[a] for a in actor_data["projects_interest"].split("+")])}\n'
                    f'<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≥–æ–Ω–æ—Ä–∞—Ä:</b> {actor_data["fee"]}')
        await state.set_data({'projects_interest': actor_data["projects_interest"].split("+")})
        await msg.answer(msg_text, reply_markup=setup_keyboard)


@users_router.callback_query(F.data.startswith('setup_'))
async def start_acc_setup(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    setup_dict = {
        'setup_passport_age': (ActorsState.passport_age_setup, '–í–æ–∑—Ä–∞—Å—Ç –ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É', None),
        'setup_playing_age': (
        ActorsState.playing_age_setup, '–ò–≥—Ä–æ–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–¥–∏–∞–ø–∞–∑–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å)', None),
        'setup_education': (ActorsState.education_setup, '–í—ã–±–µ—Ä–µ—Ç–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', education_choice),
        'setup_agent_contact': (
        ActorsState.agent_contact_setup, '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ (—Ç–µ–ª–µ—Ñ–æ–Ω, email —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)', None),
        'setup_have_experience': (ActorsState.have_experience_setup, '–ö–∞–∫–æ–π —É –≤–∞—Å –æ–ø—ã—Ç?', experience_choice),
        'setup_portfolio': (ActorsState.portfolio_setup, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ', None),
        'setup_social': (ActorsState.social_setup, '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Ü. —Å–µ—Ç–∏', None),
        'setup_fee': (ActorsState.fee_setup, '–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≥–æ–Ω–æ—Ä–∞—Ä –≤ —Ä—É–±–ª—è—Ö:', None),
        'setup_roles_type_interest': (ActorsState.roles_type_interest_setup,
                                      '–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤):',
                                      role_interested),
    }
    await callback.answer()
    await state.set_state(setup_dict[callback.data][0])
    await callback.message.answer(text=setup_dict[callback.data][1], reply_markup=setup_dict[callback.data][2])


async def review_all_data_after_setup(callback: CallbackQuery, state: FSMContext):
    """–í—ã–≤–æ–¥–∏–º –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å"""
    await callback.answer()
    actor_data = (await base.get_actor_info(callback.from_user.id))[0]
    msg_text = (f'–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:\n\n'
                f'<b>–§–ò–û:</b> {actor_data["actor_name"]}\n'
                f'<b>–ü–æ–ª:</b> {dict_for_msg_build[actor_data["sex"]]}\n'
                f'<b>–í–æ–∑—Ä–∞—Å—Ç –ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É:</b> {actor_data["passport_age"]}\n'
                f'<b>–ò–≥—Ä–æ–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:</b> {actor_data["playing_age"]}\n'
                f'<b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b> {dict_for_msg_build[actor_data["education"]]}\n'
                f'<b>–û–ø—ã—Ç:</b> {dict_for_msg_build[actor_data["have_experience"]]}\n'
                f'<b>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ:</b> {actor_data["portfolio"]}\n'
                f'<b>–°–æ—Ü. —Å–µ—Ç–∏:</b> {actor_data["social"]}\n'
                f'<b>–¢–æ, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:</b> {", ".join([dict_for_msg_build[a] for a in actor_data["projects_interest"].split("+")])}')
    await callback.message.answer(msg_text, reply_markup=setup_keyboard)


@users_router.message(Command('get_channels'))
async def get_channels(msg: Message):
    from pyrogram.enums.chat_type import ChatType  # noqa
    from aiogram.types import FSInputFile
    import os
    ch = techno_dict['parser']._client.get_dialogs()  # noqa
    with open('channels.txt', 'a', encoding='utf-8') as file:
        last_id = 0
        async for c in ch:
            if last_id != c.chat.id:
                if c.chat.type == ChatType.CHANNEL or c.chat.type == ChatType.SUPERGROUP or c.chat.type == ChatType.GROUP:
                    if c.chat.username:
                        file.write(f'https://t.me/{c.chat.username}\n')
                    else:
                        file.write(str(c.chat.title) + '\n')
                last_id = c.chat.id  # —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å–∞–º –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è
            else:
                break
    await msg.answer_document(document=FSInputFile('channels.txt'))
    os.remove('channels.txt')


@users_router.message(ActorsState.passport_age_setup)
async def setup_passport_age_func(msg: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –í–æ–∑—Ä–∞—Å—Ç –ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É"""
    await base.setup_param('passport_age', msg.text, msg.from_user.id)
    await msg.answer('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
    await state.clear()
    await open_acc_setup_menu(msg, state)


@users_router.message(ActorsState.playing_age_setup)
async def setup_playing_age_func(msg: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ò–≥—Ä–æ–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç"""
    try:
        playing_age = [int(a) for a in msg.text.split('-')]
        if len(playing_age) != 2:
            raise ValueError
        await base.setup_param('playing_age', msg.text, msg.from_user.id)
        await msg.answer('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
        await state.clear()
        await open_acc_setup_menu(msg, state)
    except ValueError:
        await msg.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!\n–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å')


@users_router.message(ActorsState.agent_contact_setup)
async def setup_agent_contact_func(msg: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞"""
    await base.setup_param('agent_contact', msg.text, msg.from_user.id)
    await msg.answer('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
    await state.clear()
    await open_acc_setup_menu(msg, state)


@users_router.message(ActorsState.portfolio_setup)
async def setup_portfolio_func(msg: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
    await base.setup_param('portfolio', msg.text, msg.from_user.id)
    await msg.answer('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
    await state.clear()
    await open_acc_setup_menu(msg, state)


@users_router.message(ActorsState.social_setup)
async def setup_social_func(msg: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ü. —Å–µ—Ç–∏"""
    await base.setup_param('social', msg.text, msg.from_user.id)
    await msg.answer('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
    await state.clear()
    await open_acc_setup_menu(msg, state)


@users_router.message(ActorsState.fee_setup)
async def setup_social_func(msg: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ–Ω–æ—Ä–∞—Ä"""
    try:
        await base.setup_param('fee', int(msg.text), msg.from_user.id)
        await msg.answer('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
        await state.clear()
        await open_acc_setup_menu(msg, state)
    except ValueError:
        await msg.answer('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ!')


@users_router.callback_query(ActorsState.education_setup)
async def setup_education_func(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"""
    await callback.answer()
    await base.setup_param('education', callback.data.replace('educ_', ''), callback.from_user.id)
    await callback.message.answer('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
    await state.clear()
    await review_all_data_after_setup(callback, state)


@users_router.callback_query(ActorsState.have_experience_setup)
async def setup_have_experience_func(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø—ã—Ç"""
    await callback.answer()
    await base.setup_param('have_experience', callback.data.replace('exp_', ''), callback.from_user.id)
    await callback.message.answer('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
    await state.clear()
    await review_all_data_after_setup(callback, state)


@users_router.callback_query(ActorsState.roles_type_interest_setup)
async def setup_roles_type_interest_func(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è """
    await callback.answer()
    if callback.data != 'ready':
        msg_text = '–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)\n–£–∂–µ –≤—ã–±—Ä–∞–Ω–æ:\n\n'

        projects_interest: list = (await state.get_data())['projects_interest']

        projects_choice = callback.data.replace('choice_', '')

        if projects_choice not in projects_interest:
            projects_interest.append(projects_choice)
        else:
            projects_interest.remove(projects_choice)

        for elem in projects_interest:
            msg_text += dict_for_msg_build[elem] + '\n'

        msg_text += '\n–ù–∞–∂–º–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ —á—Ç–æ –±—ã —É–±—Ä–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ\n–ù–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ" —á—Ç–æ –±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å'
        await state.update_data({'projects_interest': projects_interest})
        await callback.message.edit_text(msg_text, reply_markup=role_interested)
    else:
        projects_interest: list = (await state.get_data())['projects_interest']
        if len(projects_interest) > 0:
            await base.setup_param('projects_interest', '+'.join(projects_interest), callback.from_user.id)
            await state.clear()
            await review_all_data_after_setup(callback, state)
        else:
            await callback.message.answer('–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å!')
