import os
from datetime import date, timedelta
import json

from aiogram.types import Message, CallbackQuery
from aiogram import F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramForbiddenError

from loader import base, bot
from utils.admin_router import admin_router
from keyboards.reply import admin_main, cancel_button
from keyboards.inline_admin import casting_bd_period, button_for_casting_admin, user_action_menu
from states import AdminStates


@admin_router.message(Command('admin'))
async def open_admin_panel(msg: Message, state: FSMContext):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    await state.clear()
    await msg.answer(f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {msg.from_user.first_name}!\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=admin_main)


@admin_router.message(Command('drop'))
async def get_drop_messages(msg: Message):
    from aiogram.types import FSInputFile
    await msg.answer_document(document=FSInputFile('drop.log'))
    os.remove('drop.log')


@admin_router.message(F.text == 'üö´ –û—Ç–º–µ–Ω–∞')
async def cancel(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
    await msg.answer('–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=admin_main)

# ====================
# –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
# ====================


@admin_router.message(F.text == '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏')
async def user_menu_open(msg: Message):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    await msg.answer('–í—ã–±–µ—Ä–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=user_action_menu)


@admin_router.callback_query(F.data == 'count')
async def user_count(callback: CallbackQuery):
    """–ö–æ–ª-–≤–æ –∞–∫—Ç–µ—Ä–æ–≤ –≤ –±–∞–∑–µ"""
    await callback.answer()
    actors_count = len(await base.get_all_actors())
    await callback.message.answer(f'–°–µ–π—á–∞—Å –≤ –±–∞–∑–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ <b>{actors_count}</b> –∞–∫—Ç–µ—Ä–æ–≤')


@admin_router.callback_query(F.data == 'newsletter')
async def newsletter_start(callback: CallbackQuery, state: FSMContext):
    """–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    await callback.answer()
    await state.set_state(AdminStates.newsletter)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', reply_markup=cancel_button)


@admin_router.message(AdminStates.newsletter, F.text != 'üö´ –û—Ç–º–µ–Ω–∞')
async def newsletter_func(msg: Message, state: FSMContext):
    """–°–∞–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∞"""
    all_actors = await base.get_all_actors()
    for actor in all_actors:
        try:
            if actor['user_id'] != msg.from_user.id:
                await bot.send_message(chat_id=actor['user_id'], text=msg.text)
        except TelegramForbiddenError:
            pass
    await msg.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ!')
    await state.clear()
    await msg.answer('–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=admin_main)


@admin_router.callback_query(F.data == 'delete_user')
async def start_deleting(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer()
    await state.set_state(AdminStates.delete_user)
    await callback.message.answer('–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å', reply_markup=cancel_button)


@admin_router.message(AdminStates.delete_user)
async def deleting_function(msg: Message, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if msg.forward_from:
        await base.delete_user(msg.forward_from.id)
        await msg.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω')
        await state.clear()
        await msg.answer('–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=admin_main)


@admin_router.callback_query(F.data.startswith('sub_'))
async def sub_actions(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    await callback.answer()
    if callback.data == 'sub_add':
        await state.set_state(AdminStates.sub_add)
        await callback.message.answer('–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
    else:
        await state.set_state(AdminStates.sub_del)
        await callback.message.answer('–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')


async def is_digits(s):
    """–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–æ–∫–∏ - —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ—Ç"""
    import re
    return bool(re.match(r'^[0-9]+$', s))


@admin_router.message(AdminStates.sub_add)
async def add_sub_user(msg: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    if msg.forward_from or await is_digits(msg.text):
        await base.add_sub(msg.forward_from.id if not await is_digits(msg.text) else int(msg.text))
        await msg.answer('–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
        msg_text = """
<b>–ü–∞–º—è—Ç–∫–∞ –∞–∫—Ç—ë—Ä—É</b>

üëÅÔ∏è‚Äçüó®Ô∏è –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –ø—Ä–æ—Å–∏—Ç –∫–∞—Å—Ç–∏–Ω–≥-–¥–∏—Ä–µ–∫—Ç–æ—Ä. –°–æ–±–ª—é–¥–∞–π—Ç–µ —ç—Ç–∏–∫—É –æ–±—â–µ–Ω–∏—è, –∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞—è–≤–∫–∏ –Ω–æ—á—å—é.

üëÅÔ∏è‚Äçüó®Ô∏è –î–æ–±–∞–≤–ª—è–π—Ç–µ –∫–∞—Å—Ç–∏–Ω–≥–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å, –≤ ¬´–ò–∑–±—Ä–∞–Ω–Ω–æ–µ¬ª. –ß—Ç–æ–±—ã –∫ –Ω–∏–º –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–ª—É—á–∞–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Ä–æ–ª—å –∏ —É—Ç–æ—á–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è (–≥–æ–Ω–æ—Ä–∞—Ä, –¥–∞—Ç—ã –∏ —Ç.–¥.). –¢–∞–∫ –∂–µ —ç—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –æ—Ç—Å–ª–µ–¥–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø–æ–Ω—è—Ç—å –Ω–∞ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.

üëÅÔ∏è‚Äçüó®Ô∏è –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–≤–æ–∏ –∞–∫—Ç–µ—Ä—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (—Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ-–≤–∏–∑–∏—Ç–∫—É) —Ä–∞–∑ –≤ –ø–æ–ª –≥–æ–¥–∞. –¢–æ, –∫–∞–∫ –≤—ã –≤—ã–≥–ª—è–¥–∏—Ç–µ –≤ –≤–∞—à–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–º, –∫–∞–∫ –≤—ã –≤—ã–≥–ª—è–¥–∏—Ç–µ, –∫–æ–≥–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç–µ –ø—Ä–æ–±—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –µ—ë –∫–∞—Å—Ç–∏–Ω–≥-–¥–∏—Ä–µ–∫—Ç–æ—Ä—É.

üëÅÔ∏è‚Äçüó®Ô∏è –ï—Å–ª–∏ –≤–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç –º–∞–ª–æ –∫–∞—Å—Ç–∏–Ω–≥–æ–≤, ‚Äì –≤–Ω–µ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è /settings. –í—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª—å—à–µ —Ç–∏–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã, –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≥–æ–Ω–æ—Ä–∞—Ä.

üëÅÔ∏è‚Äçüó®Ô∏è –ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –º–Ω–æ–≥–æ –∑–∞—è–≤–æ–∫, –Ω–æ –≤–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç –º–∞–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, ‚Äì –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏–ª–∏ –¥–∞–∂–µ –ø–æ–º–µ–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ —Å—Ç–∏–ª—å. –ß–∞—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞–ª–µ–Ω—å–∫–æ–π –¥–µ—Ç–∞–ª–∏ –≤ –æ–±—Ä–∞–∑–µ –º–æ–∂–µ—Ç —Å–∏–ª—å–Ω–æ –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

üëÅÔ∏è‚Äçüó®Ô∏è –ú—ã —Å–æ–±–∏—Ä–∞–µ–º –¥–ª—è –≤–∞—Å –∫–∞—Å—Ç–∏–Ω–≥–∏ –≤ —Ç–æ–º —á–∏—Å–ª–µ –∏ —Å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –±—É–¥—Ç–µ –±–¥–∏—Ç–µ–ª—å–Ω—ã, –æ—Å—Ç–µ—Ä–µ–≥–∞–π—Ç–µ—Å—å –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤.
‚ö†Ô∏è –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ–±–Ω–∞–∂—ë–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –∏ –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∏ –ø–æ–¥ –∫–∞–∫–∏–º –ø—Ä–µ–¥–ª–æ–≥–æ–º. –¢–∞–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –≤ –ø—Ä–∞–∫—Ç–∏–∫–µ –∫–∏–Ω–æ–∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –±—ã—Ç—å –Ω–µ –º–æ–∂–µ—Ç.
–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–æ—Å–ª–µ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏, –≤–∞–º –ø—Ä–∏—à–ª–æ –Ω–µ–ø—Ä–∏–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, —Å—Ä–∞–∑—É –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É /support

üëÅÔ∏è‚Äçüó®Ô∏è –ú—ã —Ä–∞–∑–≤–∏–≤–∞–µ–º—Å—è –∏ –≤–Ω–µ–¥—Ä—è–µ–º –Ω–æ–≤—ã–µ –æ–ø—Ü–∏–∏, —á—Ç–æ–±—ã –≤–∞–º –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –Ω–∞—à –ø—Ä–æ–µ–∫—Ç, –ø–∏—à–∏—Ç–µ –Ω–∞–º, –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –≤–Ω–µ–¥—Ä–∏—Ç—å.

–ñ–µ–ª–∞–µ–º –≤–∞–º –±–æ–ª—å—à–∏—Ö –∫–ª–∞—Å—Å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ä–æ–ª–µ–π!

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏‚ù§Ô∏è
–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ Oh My Cast.
                """
        await bot.send_message(chat_id=msg.forward_from.id if not await is_digits(msg.text) else int(msg.text), text=msg_text)
        await state.clear()
    else:
        await msg.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!')
        await state.clear()


@admin_router.message(Command('count'))
async def get_pay_user_count(msg: Message):
    from config import CONTROL_GROUP
    count = await bot.get_chat_member_count(chat_id=CONTROL_GROUP)
    await msg.answer(f'–í –ø–ª–∞—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ <b>{count}</b> –ø–æ–¥–ø–∏—Å—á–∏–∫–∞(–æ–≤)')


@admin_router.message(AdminStates.sub_del)
async def add_sub_user(msg: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    if msg.forward_from or await is_digits(msg.text):
        await base.del_sub(msg.forward_from.id if not await is_digits(msg.text) else int(msg.text))
        await msg.answer('–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞')
        await state.clear()


@admin_router.callback_query(F.data == 'show_user')
async def show_user_settings(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer()
    await callback.message.answer('–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:')
    await state.set_state(AdminStates.show_user)


# –°–ª–æ–≤–∞—Ä—å —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
dict_for_msg_build = {
        # –†–æ–ª–∏
        'films': '–ö–∞—Å—Ç–∏–Ω–≥–∏ –≤ –∫–∏–Ω–æ',
        'series': '–ö–∞—Å—Ç–∏–Ω–≥ –≤ —Å–µ—Ä–∏–∞–ª',
        'ads': '–ö–∞—Å—Ç–∏–Ω–≥–∏ –≤ —Ä–µ–∫–ª–∞–º—É',
        'theater': '–¢–µ–∞—Ç—Ä–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã',
        'main_role': '–ì–ª–∞–≤–Ω—ã–µ –∏ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏',
        'episode': '–≠–ø–∏–∑–æ–¥—ã',
        'mass': '–ì—Ä—É–ø–ø–æ–≤–∫–∞/–º–∞—Å—Å–æ–≤–∫–∞',
        'free': '–ù–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã / —Ñ–µ—Å—Ç–∏–≤–∞–ª—å–Ω—ã–µ –∫–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–Ω—ã–µ —Ñ–∏–ª—å–º—ã –º–æ–ª–æ–¥—ã—Ö —Ä–µ–∂–∏—Å—Å—ë—Ä–æ–≤',
        # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        'vuz': '–ü–æ–ª—É—á–∏–ª –¥–∏–ø–ª–æ–º. –≥–æ—Å. –æ–±—Ä–∞–∑—Ü–∞',
        'curs': '–ü—Ä–æ—à—ë–ª –∫—É—Ä—Å—ã –∞–∫—Ç–µ—Ä—Å–∫–æ–≥–æ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞',
        'none': '–ê–∫—Ç–µ—Ä—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–µ—Ç',
        # –û–ø—ã—Ç
        'null': '–û–ø—ã—Ç–∞ –Ω–µ—Ç, —è - –Ω–æ–≤–∏—á–æ–∫',
        'ads_': '–°–Ω–∏–º–∞–ª–∞—Å—å(—Å—è) —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∫–ª–∞–º–µ / –º–∞—Å—Å–æ–≤–∫–∞—Ö/–≥—Ä—É–ø–ø–æ–≤–∫–∞—Ö',
        'free_': '–°–Ω–∏–º–∞–ª–∞—Å—å(—Å—è) –≤ —ç–ø–∏–∑–æ–¥–∞—Ö / –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö',
        'main': '–ï—Å—Ç—å –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ / –≥–ª–∞–≤–Ω—ã–µ —Ä–æ–ª–∏ –≤ –ø–æ–ª–Ω–æ–º–µ—Ç—Ä–∞–∂–Ω—ã—Ö —Ñ–∏–ª—å–º–∞—Ö/—Å–µ—Ä–∏–∞–ª–∞—Ö',
        # –ü–æ–ª
        'male': '–ú—É–∂—Å–∫–æ–π',
        'female': '–ñ–µ–Ω—Å–∫–∏–π'
    }


@admin_router.message(AdminStates.show_user)
async def show_user(msg: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if msg.forward_from:
        if msg.forward_from.id in await base.get_users_id():
            actor_data = (await base.get_actor_info(msg.forward_from.id))[0]
            msg_text = (f'–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:\n\n'
                        f'<b>–§–ò–û:</b> {actor_data["actor_name"]}\n'
                        f'<b>–ü–æ–ª:</b> {dict_for_msg_build[actor_data["sex"]]}\n'
                        f'<b>–í–æ–∑—Ä–∞—Å—Ç –ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É:</b> {actor_data["passport_age"]}\n'
                        f'<b>–ò–≥—Ä–æ–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:</b> {actor_data["playing_age"]}\n'
                        f'<b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b> {dict_for_msg_build[actor_data["education"]]}\n'
                        f'<b>–ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:</b> {actor_data["geo_location"]}\n'
                        f'<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b> {actor_data["contacts"]}\n'
                        f'<b>–û–ø—ã—Ç:</b> {dict_for_msg_build[actor_data["have_experience"]]}\n'
                        f'<b>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ:</b> {actor_data["portfolio"]}\n'
                        f'<b>–°–æ—Ü. —Å–µ—Ç–∏:</b> {actor_data["social"]}\n'
                        f'<b>–¢–æ, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:</b> {", ".join([dict_for_msg_build[a] for a in actor_data["projects_interest"].split("+")])}\n'
                        f'<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≥–æ–Ω–æ—Ä–∞—Ä:</b> {actor_data["fee"]}')
            await msg.answer(msg_text)
        await state.clear()


# ====================
# –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –∫–∞—Å—Ç–∏–Ω–≥–æ–≤
# ====================


@admin_router.message(Command('check'))
async def check_casting_text(msg: Message, state: FSMContext):
    """–ï—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–π –∫–∞—Å—Ç –≤ –±–∞–∑–µ –∏–ª–∏ –Ω–µ—Ç"""
    await state.set_state(AdminStates.casting_text)
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–∞—Å—Ç–∏–Ω–≥–∞:')


@admin_router.message(AdminStates.casting_text)
async def get_check_result(msg: Message, state: FSMContext):
    await state.clear()

    async def jaccard(x: set, y: set):
        shared = x.intersection(y)  # –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è —Ç–æ–∫–µ–Ω—ã
        return len(shared) / len(x.union(y))

    #  –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Ç–µ–∫—Å—Ç–æ–≤
    last_200_castings = await base.get_all_texts_2()
    for t in last_200_castings:
        first = set(t['casting_text'].split())
        second = set(msg.text.split())
        uniq = await jaccard(first, second)
        if uniq > 0.8:
            await msg.answer('–î–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–∏–ª–∏ –Ω–∞ 80% —Ç–∞–∫–æ–π –∂–µ) –µ—Å—Ç—å –≤ –±–∞–∑–µ')
            return True
    await msg.answer('–¢–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç')
    return False


@admin_router.message(Command('add'))
async def add_text_in_bd(msg: Message, state: FSMContext):
    await state.set_state(AdminStates.add_text)
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–∞—Å—Ç–∏–Ω–≥–∞:')


@admin_router.message(AdminStates.add_text)
async def add_text(msg: Message, state: FSMContext):
    await state.clear()
    await base.add_new_text(msg.text)
    await msg.answer('–¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω')


@admin_router.message(F.text == '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Å—Ç–∏–Ω–≥–æ–≤')
async def open_casting_bd_menu(msg: Message, state: FSMContext):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –æ—Ç—á–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ë–î —Å –∫–∞—Å—Ç–∏–Ω–≥–∞–º–∏"""
    await msg.answer('–í—ã–±–µ—Ä–µ—Ç–µ –æ—Ç—á–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥:', reply_markup=casting_bd_period)
    await state.set_state(AdminStates.set_period)


async def forming_casting_msg(casting_data, time_added, more_details=False):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Å—Ç–∏–Ω–≥–µ"""
    msg_text = (f'<i>–ö–∞—Å—Ç–∏–Ω–≥ –¥–æ–±–∞–≤–ª–µ–Ω:</i> {time_added}\n\n'
                f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:</b> {casting_data["project_name"]}\n'
                f'<b>–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:</b> {casting_data["project_type"]}\n'
                f'<b>–î–∞—Ç–∞ —Å—ä–µ–º–æ–∫:</b> {casting_data["filming_dates"]}\n')
    if more_details:
        roles_info = '–¢—Ä–µ–±—É–µ–º—ã–µ —Ä–æ–ª–∏:\n\n'
        for role in casting_data['role_description']:
            additional_requirements = role["additional_requirements"] if role.get('additional_requirements') else '–ù–µ —É–∫–∞–∑–∞–Ω'
            fee = role["fee"] if role.get('fee') else '–ù–µ —É–∫–∞–∑–∞–Ω'
            roles_info += (f'<b>–ü–æ–ª –∞–∫—Ç–µ—Ä–∞:</b> {role["actor_sex"]}\n'
                           f'<b>–í–æ–∑—Ä–∞—Å—Ç –∞–∫—Ç–µ—Ä–∞:</b> {role["age_restrictions"]}\n'
                           f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏:</b> {role["role_name"]}\n'
                           f'<b>–û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏:</b> {role["role_description"]}\n'
                           f'<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b> {additional_requirements}\n'
                           f'<b>–ì–æ–Ω–æ—Ä–∞—Ä:</b> {fee}\n\n')
        msg_text += roles_info
    return msg_text


@admin_router.callback_query(F.data.startswith('period_'))
async def set_statistic_period(callback: CallbackQuery, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –¥–æ—Å—Ç–∞–µ—Ç –∏–∑ –ë–î –∫–∞—Å—Ç–∏–Ω–≥–∏ –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥,
    —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    await callback.answer()
    date_interval = {
        'period_week': [str(date.today() - timedelta(days=7)), str(date.today() - timedelta(days=1))],
        'period_month': [str(date.today() - timedelta(days=30)), str(date.today() - timedelta(days=1))],
    }
    castings = None  # –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if callback.data == 'period_today':
        castings = await base.get_today_statistic(date_today=str(date.today()))
        for cast in castings:
            msg_text = await forming_casting_msg(json.loads(cast['casting_data']), cast['time_added'])
            await callback.message.answer(text=msg_text, reply_markup=await button_for_casting_admin(
                origin=cast['casting_origin'],
                casting_hash=cast['casting_hash']
            ))

    elif callback.data in ['period_week', 'period_month']:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        castings = await base.get_statistic_data(
            first_date=date_interval[callback.data][0],
            second_date=date_interval[callback.data][1]
        )
        for cast in castings:
            msg_text = await forming_casting_msg(json.loads(cast['casting_data']), cast['time_added'])
            await callback.message.answer(text=msg_text, reply_markup=await button_for_casting_admin(
                origin=cast['casting_origin'],
                casting_hash=cast['casting_hash']
            ))

    elif callback.data == 'period_all_days':
        castings = await base.get_statistic_for_all_period()
        for cast in castings:
            msg_text = await forming_casting_msg(json.loads(cast['casting_data']), cast['time_added'])
            await callback.message.answer(text=msg_text, reply_markup=await button_for_casting_admin(
                origin=cast['casting_origin'],
                casting_hash=cast['casting_hash']
            ))

    elif callback.data == 'period_user_date':
        await state.set_state(AdminStates.set_user_date)
        msg_text = ('–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n"2024-01-01 2024-01-09"\n'
                    '–±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –∏ –ø–µ—Ä–≤–∞—è –¥–∞—Ç–∞ –º–µ–Ω—å—à–µ –≤—Ç–æ—Ä–æ–π‚ÄºÔ∏è')
        await callback.message.answer(text=msg_text, reply_markup=cancel_button)


@admin_router.message(AdminStates.set_user_date, F.text.regexp(r'\d{4}-\d{2}-\d{2}\s\d{4}-\d{2}-\d{2}'))
async def get_user_date_interval(msg: Message, state: FSMContext):
    user_date = msg.text.split()
    castings = await base.get_statistic_data(
        first_date=user_date[0],
        second_date=user_date[1]
    )
    for cast in castings:
        msg_text = await forming_casting_msg(json.loads(cast['casting_data']), cast['time_added'])
        await msg.answer(text=msg_text, reply_markup=await button_for_casting_admin(
            origin=cast['casting_origin'],
            casting_hash=cast['casting_hash']
        ))


@admin_router.callback_query(F.data.startswith('view_'))
async def show_more_details(callback: CallbackQuery):
    """–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Å—Ç–∏–Ω–≥–æ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ"""
    await callback.answer()
    casting = (await base.get_casting(callback.data.replace('view_', '')))[0]
    msg_text = await forming_casting_msg(json.loads(casting['casting_data']), casting['time_added'], True)
    await callback.message.edit_text(msg_text, reply_markup=await button_for_casting_admin(
        origin=casting['casting_origin'],
        casting_hash=casting['casting_hash'],
        viewing=True
    ))


@admin_router.callback_query(F.data.startswith('rm_admin_'))
async def remove_casting_from_db(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ–º –∫–∞—Å—Ç–∏–Ω–≥ –∏–∑ –ë–î"""
    await callback.answer()
    await base.remove_casting(callback.data.replace('rm_admin_', ''))
    await callback.message.delete()
    await callback.message.answer('–ö–∞—Å—Ç–∏–Ω–≥ —É–¥–∞–ª–µ–Ω')
