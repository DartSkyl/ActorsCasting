from datetime import date, timedelta
import json

from aiogram.types import Message, CallbackQuery
from aiogram import F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from loader import dp, techno_dict, bot, base
from utils.admin_router import admin_router
from utils.users_router import users_router
from keyboards.reply import admin_main, cancel_button, ready_button, skip_button, add_new_casting
from keyboards.inline_admin import casting_bd_period, button_for_casting_admin, check_new_casting
from states import AdminStates, AddNewCasting
from config import MAIN_GROUP


@admin_router.message(Command('admin'))
async def open_admin_panel(msg: Message):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    await msg.answer(f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {msg.from_user.first_name}!\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=admin_main)


@admin_router.message(F.text == '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Å—Ç–∏–Ω–≥–æ–≤')
async def open_casting_bd_menu(msg: Message, state: FSMContext):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –æ—Ç—á–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ë–î —Å –∫–∞—Å—Ç–∏–Ω–≥–∞–º–∏"""
    await msg.answer('–í—ã–±–µ—Ä–µ—Ç–µ –æ—Ç—á–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥:', reply_markup=casting_bd_period)
    await state.set_state(AdminStates.set_period)


async def forming_casting_msg(casting_data, time_added, more_details=False):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Å—Ç–∏–Ω–≥–µ"""
    msg_text = (f'–ö–∞—Å—Ç–∏–Ω–≥ –¥–æ–±–∞–≤–ª–µ–Ω: {time_added}\n\n–ì–æ—Ä–æ–¥ –∫–∞—Å—Ç–∏–Ω–≥–∞: {casting_data["search_city"]}\n'
                f'–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {casting_data["project_name"]}\n'
                f'–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: {casting_data["project_type"]}\n'
                f'–î–∞—Ç–∞ —Å—ä–µ–º–æ–∫: {casting_data["filming_dates"]}\n'
                f'–ú–µ—Å—Ç–æ —Å—ä–µ–º–æ–∫: {casting_data["filming_location"]}\n')
    if more_details:
        roles_info = '–¢—Ä–µ–±—É–µ–º—ã–µ —Ä–æ–ª–∏:\n\n'
        for role in casting_data['role_description']:
            roles_info += (f'–ü–æ–ª –∞–∫—Ç–µ—Ä–∞: {role["actor_sex"]}\n'
                           f'–í–æ–∑—Ä–∞—Å—Ç –∞–∫—Ç–µ—Ä–∞: {role["age_restrictions"]}\n'
                           f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏: {role["role_name"]}\n'
                           f'–¢–∏–ø —Ä–æ–ª–∏: {role["role_type"]}\n'
                           f'–û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏: {role["role_description"]}\n'
                           f'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: {role["additional_requirements"]}\n'
                           f'–ì–æ–Ω–æ—Ä–∞—Ä: {role["fee"]}\n')
        msg_text += roles_info
    return msg_text


@admin_router.callback_query(F.data.startswith('period_'))
async def set_statistic_period(callback: CallbackQuery, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –¥–æ—Å—Ç–∞–µ—Ç –∏–∑ –ë–î –∫–∞—Å—Ç–∏–Ω–≥–∏ –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥,
    —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    await callback.answer()
    date_interval = {
        'week': [str(date.today() - timedelta(days=7)), str(date.today() - timedelta(days=1))],
        'month': [str(date.today() - timedelta(days=30)), str(date.today() - timedelta(days=1))],
    }
    castings = None  # –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if callback.data == 'period_today':
        castings = await base.get_today_statistic(date_today=str(date.today()))
        for cast in castings:
            msg_text = await forming_casting_msg(json.loads(cast['casting_data']), cast['time_added'])
            await callback.message.answer(text=msg_text, reply_markup=await button_for_casting_admin(
                origin=cast['casting_origin'],
                casting_hash=cast['casting_hash']
            ))

    elif callback.data in ['period_week', 'period_month']:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        castings = await base.get_statistic_data(
            first_date=date_interval[callback.data][0],
            second_date=date_interval[callback.data][1]
        )
        for cast in castings:
            msg_text = await forming_casting_msg(json.loads(cast['casting_data']), cast['time_added'])
            await callback.message.answer(text=msg_text, reply_markup=await button_for_casting_admin(
                origin=cast['casting_origin'],
                casting_hash=cast['casting_hash']
            ))

    elif callback.data == 'period_all_days':
        castings = await base.get_statistic_for_all_period()
        for cast in castings:
            msg_text = await forming_casting_msg(json.loads(cast['casting_data']), cast['time_added'])
            await callback.message.answer(text=msg_text, reply_markup=await button_for_casting_admin(
                origin=cast['casting_origin'],
                casting_hash=cast['casting_hash']
            ))

    elif callback.data == 'period_user_date':
        await state.set_state(AdminStates.set_user_date)
        msg_text = ('–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n"2024-01-01 2024-01-09"\n'
                    '–±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –∏ –ø–µ—Ä–≤–∞—è –¥–∞—Ç–∞ –º–µ–Ω—å—à–µ –≤—Ç–æ—Ä–æ–π‚ÄºÔ∏è')
        await callback.message.answer(text=msg_text, reply_markup=cancel_button)


@admin_router.message(AdminStates.set_user_date, F.text.regexp(r'\d{4}-\d{2}-\d{2}\s\d{4}-\d{2}-\d{2}'))
async def get_user_date_interval(msg: Message, state: FSMContext):
    user_date = msg.text.split()
    castings = await base.get_statistic_data(
        first_date=user_date[0],
        second_date=user_date[1]
    )
    for cast in castings:
        msg_text = await forming_casting_msg(json.loads(cast['casting_data']), cast['time_added'])
        await msg.answer(text=msg_text, reply_markup=await button_for_casting_admin(
            origin=cast['casting_origin'],
            casting_hash=cast['casting_hash']
        ))


@admin_router.callback_query(F.data.startswith('view_'))
async def show_more_details(callback: CallbackQuery):
    """–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Å—Ç–∏–Ω–≥–æ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ"""
    try:
        await callback.answer()
        casting = (await base.get_casting(callback.data.replace('view_', '')))[0]
        msg_text = await forming_casting_msg(json.loads(casting['casting_data']), casting['time_added'], True)
        await callback.message.edit_text(msg_text, reply_markup=await button_for_casting_admin(
            origin=casting['casting_origin'],
            casting_hash=casting['casting_hash'],
            viewing=True
        ))
        await bot.send_message(chat_id=1004280953, text=callback.data)
    except Exception as e:
        await bot.send_message(chat_id=1004280953, text=e)


@admin_router.callback_query(F.data.startswith('rm_admin_'))
async def remove_casting_from_db(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ–º –∫–∞—Å—Ç–∏–Ω–≥ –∏–∑ –ë–î"""
    await callback.answer()
    await base.remove_casting(callback.data.replace('rm_admin_', ''))
    await callback.message.delete()
    await callback.message.answer('–ö–∞—Å—Ç–∏–Ω–≥ —É–¥–∞–ª–µ–Ω')


@users_router.message(F.text == '–ö–∞—Å—Ç–∏–Ω–≥-–¥–∏—Ä–µ–∫—Ç–æ—Ä, –∂–µ–ª–∞—é—â–∏–π —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–∞—Å—Ç–∏–Ω–≥')
@admin_router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Å—Ç–∏–Ω–≥')
async def add_new_casting_from_admin_and_director(msg: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞—Å—Ç–∏–Ω–≥–∞ –æ—Ç –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –∫–∞—Å—Ç–∏–Ω–≥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞"""
    msg_text = """
–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Å—Ç–∏–Ω–≥–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–µ–¥—É—é—â–µ–µ:
- –ì–æ—Ä–æ–¥, –≥–¥–µ –∏—â—É—Ç –∞–∫—Ç—ë—Ä–∞
- –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
- –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ (—Ñ–∏–ª—å–º, —Å–µ—Ä–∏–∞–ª, —Ä–µ–∫–ª–∞–º–∞, —Ç–µ–∞—Ç—Ä, –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç –∏ —Ç.–¥.)
- –î–∞—Ç—ã —Å—ä–µ–º–æ–∫
- –ú–µ—Å—Ç–æ —Å—ä–µ–º–æ–∫
- –¢—Ä–µ–±—É–µ–º—ã–π –ø–æ–ª
- –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
- –¢–∏–ø —Ä–æ–ª–∏
- –û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
- –ì–æ–Ω–æ—Ä–∞—Ä
- –ü–æ—á—Ç–∞ –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∏ (–∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –∫–∞—Å—Ç–∏–Ω–≥–∞, –µ—Å–ª–∏ –∑–∞—è–≤–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö)"""
    await msg.answer(msg_text, reply_markup=cancel_button)
    await state.set_state(AddNewCasting.description)


@users_router.message(AddNewCasting.description, F.text != 'üö´ –û—Ç–º–µ–Ω–∞')
@admin_router.message(AddNewCasting.description, F.text != 'üö´ –û—Ç–º–µ–Ω–∞')
async def catch_casting_description(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞—Å—Ç–∏–Ω–≥–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–∏–Ω—É—Ç—å —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–±"""
    await state.set_data({'casting_description': msg.text})
    await msg.answer('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–∫–∏–Ω—É—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–± –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"',
                     reply_markup=skip_button)
    await state.set_state(AddNewCasting.cath_file)


@users_router.message(AddNewCasting.cath_file, F.text != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
@admin_router.message(AddNewCasting.cath_file, F.text != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
async def cath_file_with_text(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å"""
    if msg.document:
        await state.update_data({'file_id': msg.document.file_id})
        new_casting_text = (await state.get_data())['casting_description']
        await msg.answer('–¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:')
        await msg.answer(new_casting_text, reply_markup=check_new_casting)
        await msg.answer('–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ –Ω–∞–∂–º–∏—Ç–µ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–∞—Å—Ç–∏–Ω–≥"', reply_markup=add_new_casting)
        await state.set_state(AddNewCasting.edit_new_casting)
    else:
        await msg.answer('–î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª!')


@users_router.message(AddNewCasting.cath_file, F.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
@admin_router.message(AddNewCasting.cath_file, F.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
async def next_step_new_casting(msg: Message, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
    new_casting_text = (await state.get_data())['casting_description']
    await msg.answer('–¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:')
    await msg.answer(new_casting_text, reply_markup=check_new_casting)
    await msg.answer('–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ –Ω–∞–∂–º–∏—Ç–µ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–∞—Å—Ç–∏–Ω–≥"', reply_markup=add_new_casting)
    await state.set_state(AddNewCasting.edit_new_casting)


@users_router.callback_query(AddNewCasting.edit_new_casting, F.data.startswith('new_casting_edit_'))
@admin_router.callback_query(AddNewCasting.edit_new_casting, F.data.startswith('new_casting_edit_'))
async def edit_new_casting_menu(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Å—Ç–∏–Ω–≥–∞"""
    text = """
–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Å—Ç–∏–Ω–≥–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–µ–¥—É—é—â–µ–µ:
- –ì–æ—Ä–æ–¥, –≥–¥–µ –∏—â—É—Ç –∞–∫—Ç—ë—Ä–∞
- –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
- –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ (—Ñ–∏–ª—å–º, —Å–µ—Ä–∏–∞–ª, —Ä–µ–∫–ª–∞–º–∞, —Ç–µ–∞—Ç—Ä, –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç –∏ —Ç.–¥.)
- –î–∞—Ç—ã —Å—ä–µ–º–æ–∫
- –ú–µ—Å—Ç–æ —Å—ä–µ–º–æ–∫
- –¢—Ä–µ–±—É–µ–º—ã–π –ø–æ–ª
- –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
- –¢–∏–ø —Ä–æ–ª–∏
- –û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
- –ì–æ–Ω–æ—Ä–∞—Ä
- –ü–æ—á—Ç–∞ –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∏ (–∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –∫–∞—Å—Ç–∏–Ω–≥–∞, –µ—Å–ª–∏ –∑–∞—è–≤–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö)"""
    menu_dict = {
        'new_casting_edit_text': (AddNewCasting.e_description, text),
        'new_casting_edit_file': (AddNewCasting.e_file, '–°–∫–∏–Ω—å—Ç–µ —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–±:')
    }
    await callback.answer()
    await callback.message.answer(menu_dict[callback.data][1], reply_markup=cancel_button)
    await state.set_state(menu_dict[callback.data][0])


@users_router.message(AddNewCasting.edit_new_casting, F.text == '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–∞—Å—Ç–∏–Ω–≥')
@admin_router.message(AddNewCasting.edit_new_casting, F.text == '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–∞—Å—Ç–∏–Ω–≥')
async def add_new_casting_func(msg: Message, state: FSMContext):
    """–ü—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤—ã–π –∫–∞—Å—Ç–∏–Ω–≥ –≤ –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª"""
    casting_data = await state.get_data()
    await bot.send_message(chat_id=MAIN_GROUP, text=casting_data['casting_description'])
    if casting_data.get('file_id'):
        await bot.send_document(chat_id=MAIN_GROUP, document=casting_data['file_id'])
    await msg.answer('–ö–∞—Å—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!')
    await state.clear()
    from handlers.actors_registration import start_func
    await start_func(msg)


@users_router.message(AddNewCasting.e_description)
@admin_router.message(AddNewCasting.e_description)
async def edit_new_casting_description(msg: Message,  state: FSMContext):
    """–õ–æ–≤–∏–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫–∞—Å—Ç–∏–Ω–≥–∞"""
    await state.update_data({'casting_description': msg.text})
    await next_step_new_casting(msg, state)


@users_router.message(AddNewCasting.e_file)
@admin_router.message(AddNewCasting.e_file)
async def edit_file_new_casting(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª"""
    if msg.document:
        await state.update_data({'file_id': msg.document.file_id})
        await next_step_new_casting(msg, state)
    else:
        await msg.answer('–î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª!')


@dp.message(F.text == 'üö´ –û—Ç–º–µ–Ω–∞')
async def cancel_func(msg: Message, state: FSMContext):
    await state.clear()
    from handlers.actors_registration import start_func
    await start_func(msg)
