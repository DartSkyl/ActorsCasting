from aiogram.types import Message, CallbackQuery
from aiogram import F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from pyrogram.errors.exceptions.bad_request_400 import ApiIdInvalid
from pyrogram.errors.exceptions.not_acceptable_406 import PhoneNumberInvalid

from utils.admin_router import admin_router
from utils.user_bot_parser import UserBotParser, parser_start, parser_stop, parser_status
from keyboards.inline_admin import add_user_bot, check_data_keyboard
from keyboards.reply import cancel_button
from states import AdminStates
from loader import techno_dict


@admin_router.message(Command('user_bot'))
@admin_router.message(F.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞')
async def open_user_bot_menu(msg: Message):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —é–∑–µ—Ä-–±–æ—Ç–æ–º"""
    await msg.answer('–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=add_user_bot)


@admin_router.message(Command('restart'))
async def restart_bot(msg: Message):
    """–î–ª—è –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    import os
    await msg.answer('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...')
    os.system('systemctl restart casting.service')


@admin_router.callback_query(F.data.startswith('parser_'))
async def parser_start_func(callback: CallbackQuery):
    """–ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä"""
    await callback.answer()
    try:
        if callback.data == 'parser_start':
            await parser_start()
            await callback.message.answer('–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω')
        elif callback.data == 'parser_stop':
            await parser_stop()
            await callback.message.answer('–ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        else:
            await callback.message.answer(f'–ü–∞—Ä—Å–µ—Ä {"–∑–∞–ø—É—â–µ–Ω" if await parser_status() else "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}')
    except KeyError:
        await callback.message.answer('–û—à–∏–±–∫–∞! –Æ–∑–µ—Ä-–±–æ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')


# ====================
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä-–±–æ—Ç–∞
# ====================


@admin_router.callback_query(F.data == 'add_user_bot')
async def start_add_user_bot(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/–∑–∞–º–µ–Ω—É —é–∑–µ—Ä-–±–æ—Ç–∞"""
    await callback.answer()
    await state.set_state(AdminStates.api_id_input)
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ api_id:', reply_markup=cancel_button)


@admin_router.message(AdminStates.api_id_input, F.text.isdigit())
async def api_hash_input(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –º—ã –ª–æ–≤–∏–º api_id –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ api_hash"""
    await state.set_data({'api_id': msg.text})
    await state.set_state(AdminStates.api_hash_input)
    await msg.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ api_hash:')


@admin_router.message(AdminStates.api_hash_input, F.text != '–û—Ç–º–µ–Ω–∞')
async def phone_number_input(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –º—ã –ª–æ–≤–∏–º api_has –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await state.update_data({'api_hash': msg.text})
    await state.set_state(AdminStates.phone_number_input)

    await msg.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:')


@admin_router.message(AdminStates.phone_number_input, F.text.regexp(r'\+\d{10,}'))
async def phone_number_adding(msg: Message, state: FSMContext):
    """–í—ã–Ω–µ—Å–µ–º –ª–æ–≤–ª—é —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞"""
    await state.update_data({'phone_number': msg.text})
    await state.set_state(AdminStates.check_data)
    await check_the_data(msg=msg, state=state)


async def check_the_data(msg: Message, state: FSMContext):
    """–î–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Ö –∏—Å–ø—Ä–∞–≤–∏—Ç—å"""

    account_data = await state.get_data()
    msg_text = (f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n'
                f'api_id: {account_data["api_id"]}\n'
                f'api_hash: {account_data["api_hash"]}\n'
                f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {account_data["phone_number"]}')
    await msg.answer(text=msg_text, reply_markup=check_data_keyboard)


@admin_router.callback_query(AdminStates.check_data, F.data != 'correct')
async def change_the_data(callback: CallbackQuery, state: FSMContext):
    """–ó–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–±–æ –º–µ–Ω—è–µ—Ç –∫–∞–∫–∏–µ-–Ω–∏–±—É–¥—å –¥–∞–Ω–Ω—ã–µ –ª–∏–±–æ –∏–¥–µ—Ç –¥–∞–ª—å—à–µ"""
    await callback.answer()
    change_states = {
        'change_api_id': (AdminStates.change_api_id, '–í–≤–µ–¥–∏—Ç–µ api_id:'),
        'change_api_hash': (AdminStates.change_api_hash, '–í–≤–µ–¥–∏—Ç–µ api_hash:'),
        'change_phone_number': (AdminStates.change_phone_number, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    }
    await state.set_state(change_states[callback.data][0])
    await callback.message.answer(text=change_states[callback.data][1])


@admin_router.callback_query(AdminStates.check_data, F.data == 'correct')
async def auth_function(callback: CallbackQuery, state: FSMContext):
    """–ó–¥–µ—Å—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    await callback.answer()
    account_data = await state.get_data()
    new_account = UserBotParser(
        api_id=account_data['api_id'],
        api_hash=account_data['api_hash'],
        phone_number=account_data['phone_number']
    )

    try:
        await callback.message.answer(text='–°–µ–π—á–∞—Å –≤–∞–º –ø—Ä–∏–¥–µ—Ç –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ!\n'
                                           '–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ:')
        # –õ–æ–≤–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ö—ç—à –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        code_hash = await new_account.start_session()
        await state.update_data({'code_hash': code_hash, 'new_account': new_account})

        await state.set_state(AdminStates.code_input)

    except ApiIdInvalid:
        await callback.message.answer(text='–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π <b>api_id –∏–ª–∏ api_hash</b>!\n'
                                           '–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –∏ –≤–≤–µ–¥–∏ –∑–∞–Ω–æ–≤–æ')
        await state.set_state(AdminStates.check_data)

    except PhoneNumberInvalid:
        await callback.message.answer(text='–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>!\n'
                                           '–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –∏ –≤–≤–µ–¥–∏ –∑–∞–Ω–æ–≤–æ')
        await state.set_state(AdminStates.check_data)


@admin_router.message(AdminStates.code_input, F.text.regexp(r'\d{5}'))
async def auth_code_input(msg: Message, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –∑–¥–µ—Å—å –º—ã –µ–≥–æ –ª–æ–≤–∏–º"""
    account_data = await state.get_data()
    await account_data['new_account'].authorization_and_start(code_hash=account_data['code_hash'], code=str(msg.text))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–∏–≤—à–µ–≥–æ—Å—è —é–∑–µ—Ä-–±–æ—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
    techno_dict['parser'] = account_data['new_account']

    await msg.answer(text='–Æ–∑–µ—Ä-–±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!')
    await state.clear()


@admin_router.message(AdminStates.code_input, F.text != 'üö´ –û—Ç–º–µ–Ω–∞')
async def code_error_input(msg: Message):
    """–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫–æ–¥–∞"""
    await msg.answer(text='–ö–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—è—Ç—å —Ü–∏—Ñ—Ä! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:')


@admin_router.message(AdminStates.change_api_id, F.text.isdigit())
async def change_api_id(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è–µ—Ç api_id"""
    await state.update_data({'api_id': msg.text})
    await check_the_data(msg=msg, state=state)
    await state.set_state(AdminStates.check_data)


@admin_router.message(AdminStates.change_api_id, F.text != 'üö´ –û—Ç–º–µ–Ω–∞')
@admin_router.message(AdminStates.api_id_input, F.text != 'üö´ –û—Ç–º–µ–Ω–∞')
async def api_error_input(msg: Message):
    """–ü—Ä–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –≤–≤–æ–¥–µ api_id"""
    await msg.answer(text='api_id —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥')


@admin_router.message(AdminStates.change_api_hash, F.text != 'üö´ –û—Ç–º–µ–Ω–∞')
async def change_api_hash(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è–µ—Ç api_hash"""
    await state.update_data({'api_hash': msg.text})
    await check_the_data(msg=msg, state=state)
    await state.set_state(AdminStates.check_data)


@admin_router.message(AdminStates.change_phone_number, F.text.regexp(r'\+\d{10,}'))
async def change_phone_number(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä"""
    await state.update_data({'phone_number': msg.text})
    await check_the_data(msg=msg, state=state)
    await state.set_state(AdminStates.check_data)


@admin_router.message(AdminStates.change_phone_number, F.text != 'üö´ –û—Ç–º–µ–Ω–∞')
@admin_router.message(AdminStates.phone_number_input, F.text != 'üö´ –û—Ç–º–µ–Ω–∞')
async def phone_nuber_error_input(msg: Message):
    """–ü—Ä–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –≤–≤–æ–¥–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞"""
    await msg.answer(text='–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n'
                          '–ü—Ä–∏–º–µ—Ä +79221110500\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!')
