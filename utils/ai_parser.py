import hashlib
import json

from langchain_openai import ChatOpenAI
from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import JsonOutputParser
from pydantic import BaseModel, Field
from typing import List
from config import OPENAI_API_KEY
from loader import base


class ProjectInfo(BaseModel):
    """–ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ"""
    project_name: str = Field(description='–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞')
    project_type: str = Field(default='–ù–µ —É–∫–∞–∑–∞–Ω–æ', description='–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞, –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –ø–æ–ª–Ω–æ–º–µ—Ç—Ä–∞–∂–Ω—ã–π —Ñ–∏–ª—å–º, —Å–µ—Ä–∏–∞–ª, —Ä–µ–∫–ª–∞–º–∞,'
                                          '–Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç')
    filming_dates: str = Field(description='–î–∞—Ç—ã —Å—ä–µ–º–æ–∫.')


class CastingForActors(BaseModel):
    """–ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Å—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –∞–∫—Ç–µ—Ä–æ–≤"""

    class RoleDescription(BaseModel):
        """–ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å–∞–º—É —Ä–æ–ª—å: –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, —Ç–∏–ø —Ä–æ–ª–∏, –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ –∏ —Ç.–¥."""
        actor_sex: str = Field(description='–¢—Ä–µ–±—É–µ–º—ã–π –ø–æ–ª –∞–∫—Ç–µ—Ä–∞, –º–æ–∂–µ—Ç –±—ã—Ç—å —è–≤–Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω—É–∂–Ω–æ')
        age_restrictions: str = Field(description='–í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è')
        role_name: str = Field(description='–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –∏–ª–∏ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —Å—ã–≥—Ä–∞—Ç—å')
        role_description: str = Field(description='–û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ —Ç–æ–≥–æ, –∫–æ–≥–æ –Ω—É–∂–Ω–æ —Å—ã–≥—Ä–∞—Ç—å')
        additional_requirements: str = Field(default='–ù–µ —É–∫–∞–∑–∞–Ω', description='–†–µ—Ñ–µ—Ä–µ–Ω—Å, –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω –∏–∑ —Ñ–∏–ª—å–º–∞')
        fee: str = Field(default='0', description='–ì–æ–Ω–æ—Ä–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –∞–∫—Ç–µ—Ä –ø–æ–ª—É—á–∏—Ç –∑–∞ —Ä–æ–ª—å. –í —Ç–µ–∫—Å—Ç–µ –º–æ–∂–µ—Ç '
                                                  '–±—ã—Ç—å –æ–±–æ–∑–Ω–∞—á–µ–Ω–∞ "—Å—Ç–∞–≤–∫–∞", —ç–º–æ–¥–∑–∏ üí∞ –∏–ª–∏ —á—Ç–æ —Ç–æ –ø–æ–¥–æ–±–Ω–æ–µ. '
                                                  '–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, —Ç–æ –ø—Ä–æ—Å—Ç–æ 0')

    # project_name: str = Field(description='–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞')
    # project_type: str = Field(description='–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞, –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –ø–æ–ª–Ω–æ–º–µ—Ç—Ä–∞–∂–Ω—ã–π —Ñ–∏–ª—å–º, —Å–µ—Ä–∏–∞–ª, —Ä–µ–∫–ª–∞–º–∞,'
    #                                       '–Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç')
    # filming_dates: str = Field(description='–î–∞—Ç—ã —Å—ä–µ–º–æ–∫.')
    role_description: List[RoleDescription] = Field(description='–æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å–∞–º—É —Ä–æ–ª—å: –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, —Ç–∏–ø —Ä–æ–ª–∏, –æ–ø–∏—Å–∞–Ω–∏–µ '
                                                                '—Ä–æ–ª–∏ –∏ —Ç.–¥.')


class ConfigurationParsing(BaseModel):
    """–ö–ª–∞—Å—Å –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ö–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –∞–∫—Ç–µ—Ä—Å–∫–∏—Ö –∫–∞—Å—Ç–∏–Ω–≥–æ–≤"""
    project_type: str = Field(default='Unspecified',
                              description='–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞. –†–µ–∫–ª–∞–º–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ "ads"; –∫–∏–Ω–æ, —Ñ–∏–ª—å–º—ã –∏–º–µ—é—Ç'
                                          '–∑–Ω–∞—á–µ–Ω–∏–µ "films", —Å–µ—Ä–∏–∞–ª—ã —Ç–æ–∂–µ –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ "films"; '
                                          '–ù–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã / —Ñ–µ—Å—Ç–∏–≤–∞–ª—å–Ω—ã–µ –∫–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–Ω—ã–µ '
                                          '—Ñ–∏–ª—å–º—ã –º–æ–ª–æ–¥—ã—Ö —Ä–µ–∂–∏—Å—Å—ë—Ä–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–µ "free"')

    actor_sex: str = Field(description='–ü–æ–ª –∞–∫—Ç–µ—Ä–∞ –∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ú—É–∂—Å–∫–æ–π –ø–æ–ª –∑–Ω–∞—á–µ–Ω–∏–µ "male"; –∂–µ–Ω—Å–∫–∏–π –ø–æ–ª –∑–Ω–∞—á–µ–Ω–∏–µ '
                                       '"female"')

    age_restrictions: str = Field(description='–í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –¥–≤–µ —Ü–∏—Ñ—Ä—ã —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å(–Ω–∞–ø—Ä–∏–º–µ—Ä "30-40")')
    fee: int = Field(default=0, description='–ì–æ–Ω–æ—Ä–∞—Ä –∑–∞ —Ä–æ–ª—å. –í —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∫–∞–∑–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω, '
                                            '—Ç–æ –Ω—É–∂–Ω–∞ –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞')


class ContactsParsing(BaseModel):
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –ø—Ä–∞–≤–∏–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –¥–ª—è –∫–∞—Å—Ç–∏–Ω–≥–æ–≤"""
    contacts: str = Field(default='–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏',
                          description='–ö–æ–Ω—Ç–∞–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–≤–∏–ª –∞–≤—Ç–æ—Ä –∫–∞—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫. '
                                      '–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ–Ω—Ç–∞–∫—Ç –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ, email, '
                                      '—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Ä–µ—Å—É—Ä—Å. –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ '
                                      '–Ω–∞–ø–∏—Å–∞–Ω–æ "–∑–∞—è–≤–∫–∏ –æ—Å—Ç–∞–≤–ª—è—Ç—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö" –∏–ª–∏ —á—Ç–æ —Ç–æ '
                                      '–ø–æ–¥–æ–±–Ω–æ–µ, –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏".')
    # title: str = Field(default='–Ω–µ—É–∫–∞–∑–∞–Ω', description='–î–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º —á–∞—Å—Ç–æ —É–∫–∞–∑—ã–≤–∞—é—Ç —á—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ '
    #                                                    '–∑–∞–≥–æ–ª–æ–≤–∫–µ –∏–ª–∏ —Ç–µ–º–µ –ø–∏—Å—å–º–∞')
    rules: str = Field(default='–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', description='–ü—Ä–∞–≤–∏–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≥–æ, —á—Ç–æ '
                                                          '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤ –∑–∞—è–≤–∫–µ: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ —Ç–µ–º–∞ –ø–∏—Å—å–º–∞,'
                                                          '–ø–µ—Ä–µ—á–µ–Ω—å –ø—É–Ω–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏ —á—Ç–æ –≤ –Ω–∏—Ö '
                                                          '–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.')


class AdvertisingRights(BaseModel):
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∞–≤–∞—Ö –Ω–∞ —Ä–µ–∫–ª–∞–º—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–∞—Å—Ç–∏–Ω–≥–µ"""
    rights: str = Field(description='–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤. –¢–∞–º –ø–∏—à–µ—Ç—Å—è —Å—Ä–æ–∫ –∏ –≥–¥–µ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–æ')


class ItCastingOrNot(BaseModel):
    """–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ —Ç–æ–º, –∫–∞—Å—Ç–∏–Ω–≥ —ç—Ç–æ –∏–ª–∏ –Ω–µ—Ç"""
    it_casting: bool = Field(description='–ï—Å–ª–∏ –ø–æ—Å—Ç—É–ø–∏–≤—à–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Å—Ç–∏–Ω–≥–µ —Ç–æ–≥–¥–∞ True, '
                                         '–µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–≥–¥–∞ False')


class ProbeText(BaseModel):
    """–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–±"""
    text: str = Field(default='–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', description='–¢–µ–∫—Å—Ç –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–± –¥–ª—è –∞–∫—Ç–µ—Ä–æ–≤. –°–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –∏ –¥–∏–∞–ª–æ–≥ '
                                                         '–∏–ª–∏ –º–æ–Ω–æ–ª–æ–≥. –ï—Å–ª–∏ –∏ –µ—Å—Ç—å, —Ç–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ñ—Ä–∞–∑—ã "—Ç–µ–∫—Å—Ç –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–±" '
                                                         '–∏–ª–∏ –ø–æ—Ö–æ–∂–µ–π –ø–æ —Å–º—ã—Å–ª—É —Ñ—Ä–∞–∑—ã.')


# –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
project_prompt_text = """–¢–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Å—Ç–∏–Ω–≥–∞–º–∏ –¥–ª—è –∞–∫—Ç–µ—Ä–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –∏–∑–≤–ª–µ—á—å –æ—Ç—Ç—É–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ
–ø—Ä–æ–µ–∫—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞, –¥–∞—Ç–∞ —Å—ä–µ–º–æ–∫. –û—Ç–≤–µ—á–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–æ –≤ –ø–æ–¥—Å–∫–∞–∑–∫–µ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é 
{format_instructions}. –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {input}"""
project_prompt = PromptTemplate.from_template(project_prompt_text)
project_parser = JsonOutputParser(pydantic_object=ProjectInfo)

# –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Å—Ç–∏–Ω–≥–∞—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
prompt_text = """–¢–µ–±–µ –±—É–¥—É—Ç —Å–∫–∏–¥—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ 
–∫–∞—Å—Ç–∏–Ω–≥–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞—Ç—å –æ—Ç —Ç—É–¥–∞ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –ø–æ–¥—Å–∫–∞–∑–∫–µ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é 
{format_instructions}. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è! –¢—Ä–µ–±—É–µ–º—ã–π –ø–æ–ª –∞–∫—Ç–µ—Ä–∞ —á–∞—Å—Ç–æ —è–≤–Ω–æ 
–Ω–µ —É–∫–∞–∑—ã–≤–∞—é—Ç, –ø–æ —ç—Ç–æ–º—É –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–ø—Ä–∏–º–µ—Ä "–∏—â–µ–º –º—É–∂—á–∏–Ω –∏ –∂–µ–Ω—â–∏–Ω –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ 
20-30 –ª–µ—Ç", —Ç–æ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–π —ç—Ç–æ –∫–∞–∫ –¥–≤–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ä–æ–ª–∏: –º—É–∂—á–∏–Ω–∞ 20-30 –ª–µ—Ç –∏ –∂–µ–Ω—â–∏–Ω–∞ 20-30 –ª–µ—Ç, "–º–∞–ª—å—á–∏–∫–∏ –∏ –¥–µ–≤–æ—á–∫–∏" —ç—Ç–æ
—Ç–æ–∂–µ –¥–≤–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –º—É–∂—Å–∫–æ–≥–æ –∏ –∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∞.
–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Å—Ç–∏–Ω–≥–æ–º: {input}"""
prompt_text_ = """
–ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–∞—Å—Ç–∏–Ω–≥–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
- –ø–æ–ª –∞–∫—Ç—ë—Ä–∞ (–µ—Å–ª–∏ –æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω —è–≤–Ω–æ, –æ–ø—Ä–µ–¥–µ–ª–∏ –µ–≥–æ –ø–æ —Ç–µ–∫—Å—Ç—É);
- –≤–æ–∑—Ä–∞—Å—Ç –∞–∫—Ç—ë—Ä–∞ –∏–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (–µ—Å–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ—Å—Ç–∞–≤—å –ø—Ä–æ—á–µ—Ä–∫);
- –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏;
- –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∞–∫—Ç—ë—Ä–∞–º (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å);
- –≥–æ–Ω–æ—Ä–∞—Ä –∑–∞ —Ä–æ–ª—å.
–ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–ø—Ä–∏–º–µ—Ä "–∏—â–µ–º –º—É–∂—á–∏–Ω –∏ –∂–µ–Ω—â–∏–Ω –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ 
20-30 –ª–µ—Ç", —Ç–æ —Ä–∞–∑–±–µ–π –∏—Ö –Ω–∞ –¥–≤–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ä–æ–ª–∏: –º—É–∂—á–∏–Ω–∞ 20-30 –ª–µ—Ç –∏ –∂–µ–Ω—â–∏–Ω–∞ 20-30 –ª–µ—Ç, "–º–∞–ª—å—á–∏–∫–∏ –∏ –¥–µ–≤–æ—á–∫–∏" —ç—Ç–æ
—Ç–æ–∂–µ –¥–≤–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –º—É–∂—Å–∫–æ–≥–æ –∏ –∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∞. –£—á—Ç–∏—Ç–µ, —á—Ç–æ –≥–æ–Ω–æ—Ä–∞—Ä –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –æ–¥–∏–Ω –Ω–∞ –≤—Å–µ—Ö.
–¢–µ–±–µ –Ω—É–∂–Ω–æ —Å—Ç—Ä–æ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –ø–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é {format_instructions}.
–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {input}
"""
prompt = PromptTemplate.from_template(prompt_text_)
parser = JsonOutputParser(pydantic_object=CastingForActors)

# –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Å—Ç–∏–Ω–≥–∞—Ö
prompt_text_2 = """–¢–µ–±–µ –±—É–¥–µ—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –∞–∫—Ç–µ—Ä–æ–≤. –¢–µ–±–µ –Ω—É–∂–Ω–æ —Å—Ç—Ä–æ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–µ –≤ 
–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –ø–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é {format_instructions}. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Å—Ç–∏–Ω–≥–µ: {input}"""
prompt_2 = PromptTemplate.from_template(prompt_text_2)
parser_2 = JsonOutputParser(pydantic_object=ConfigurationParsing)

# –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∞–≤–∏–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –¥–ª—è –∫–∞—Å—Ç–∏–Ω–≥–æ–≤
prompt_text_3 = """–¢–µ–±–µ –±—É–¥–µ—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –∞–∫—Ç–µ—Ä–æ–≤. –¢–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–≤–ª–µ—á—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ,
–∫—É–¥–∞ –∞–∫—Ç–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –µ—Å—Ç—å. –û–±—ã—á–Ω–æ –æ–Ω–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ –≤–∏–¥–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, email, –∫–æ–Ω—Ç–∞–∫—Ç—ã
–≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö –∏–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Ä–µ—Å—É—Ä—Å. –¢–∞–∫ –∂–µ, –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –∏
–µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –µ—Å—Ç—å, —Ç–æ –∏—Ö —Ç–æ–∂–µ –Ω—É–∂–Ω–æ –∏–∑–≤–ª–µ—á—å. –û–±—ã—á–Ω–æ, –ø—Ä–∞–≤–∏–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –ø–∏—à—É—Ç –ø–æ—Å–ª–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏,
–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–∏ —ç—Ç–æ, —ç—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω email, —Ç–æ —á–∞—Å—Ç–æ —É–∫–∞–∑—ã–≤–∞—é —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ–º–µ –ø–∏—Å—å–º–∞.
–í—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑–≤–ª–µ–∫–∞—Ç—å —Ä–æ–≤–Ω–æ –≤ —Ç–æ–º –≤–∏–¥–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –¢–µ–±–µ –Ω—É–∂–Ω–æ —Å—Ç—Ä–æ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–µ –≤ 
—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –ø–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é {format_instructions}. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Å—Ç–∏–Ω–≥–µ: {input}"""
prompt_3 = PromptTemplate.from_template(prompt_text_3)
parser_3 = JsonOutputParser(pydantic_object=ContactsParsing)

# –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ç–µ–º—É –∫–∞—Å—Ç–∏–Ω–≥–∞
check_prompt_text = """–¢–≤–æ—è –∑–∞–¥–∞—á–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ 
–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Å—Ç–∏–Ω–≥–µ –¥–ª—è –∞–∫—Ç–µ—Ä–æ–≤ –∏–ª–∏ –Ω–µ—Ç. –£—á—Ç–∏, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Å—Ç–∏–Ω–≥–æ–º –º–æ–∂–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–µ–±–µ —Å–∞–º–æ —Å–ª–æ–≤–æ 
"–∫–∞—Å—Ç–∏–Ω–≥". –¢.–µ. –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –æ–ø–∏—Å—ã–≤–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ 
—Å—ä–µ–º–∫–∞—Ö –∫–∏–Ω–æ, —Å–µ—Ä–∏–∞–ª–æ–≤, —Ä–µ–∫–ª–∞–º—ã, –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ "–∫–∞—Å—Ç–∏–Ω–≥" –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ—Å—Ç–æ–≥–æ 
—É–ø–æ–º–∏–Ω–∞–Ω–∏—è "–æ –∫–∞–∫–æ–º —Ç–æ —Ç–∞–º –∫–∞—Å—Ç–∏–Ω–≥–µ" –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ä–æ–ª—è—Ö –∏ –ø—Ä–æ–µ–∫—Ç–µ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–≤–æ–¥—è—Ç 
–∫–∞—Å—Ç–∏–Ω–≥, —Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ–±—Ä–∞—â–∞—è –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–∞—Å—Ç–∏–Ω–≥ -
–∑–Ω–∞—á–∏—Ç –∫–∞—Å—Ç–∏–Ω–≥, –µ—Å–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –∑–Ω–∞—á–∏—Ç –Ω–µ—Ç. –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≥–æ–Ω–æ—Ä–∞—Ä, —Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –∫–∞—Å—Ç–∏–Ω–≥
–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–æ –≤ –ø–æ–¥—Å–∫–∞–∑–∫–µ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é {format_instructions}.
–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {input}"""
check_prompt = PromptTemplate.from_template(check_prompt_text)
check_parser = JsonOutputParser(pydantic_object=ItCastingOrNot)

# –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∞–≤–∞—Ö –∏–∑ –∫–∞—Å—Ç–∏–Ω–≥–∞
rights_prompt_text = """–¢–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Å—Ç–∏–Ω–≥–∞—Ö –¥–ª—è –∞–∫—Ç–µ—Ä–æ–≤ –¥–ª—è —Å—ä–µ–º–æ–∫ —Ä–µ–∫–ª–∞–º—ã.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ –∏–∑–≤–ª–µ—á—å –∏–∑ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∞—Ö. –¢–∞–º –ø–∏—à–µ—Ç—Å—è —Å—Ä–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä 2 –≥–æ–¥–∞, –∏ –≥–¥–µ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–æ, 
–∫ –ø—Ä–∏–º–µ—Ä—É —Ç–≤ –∏ —Å–æ—Ü —Å–µ—Ç–∏. –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ç–∞–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:
----
–ü–†–ê–í–ê:
 3 –º–µ—Å—è—Ü–∞ —Å 13.12.2024, Digital, –†–§, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç (–≤–µ—Å—å –º–∏—Ä)
- 1 –¥–µ–Ω—å –¥–ª—è —Å–ø–æ—Å–æ–±–æ–≤: —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ñ–∏—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–∞–±–µ–ª—é, –ø—Ä–æ–∫–∞—Ç, –∑–∞–ø–∏—Å—å, –∏–º–ø–æ—Ä—Ç, –ø—É–±–ª–∏—á–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ/–ø–æ–∫–∞–∑.

–ü–†–ê–í–ê –ü–û –ê–ö–¢–Å–†–ê–ú, –ö–û–¢–û–†–´–ï –í –í–ò–î–ï–û, –∏ –∫–æ—Ç–æ—Ä—ã–µ —Å–Ω–∏–º–∞—é—Ç—Å—è 25 –Ω–æ—è–±—Ä—è:
–í–ò–î–ï–û - 2 –≥–æ–¥–∞, –¢–í –†–§, –ò–Ω—Ç–µ—Ä–Ω–µ—Ç, –º–µ—Å—Ç–∞ –ø—Ä–æ–¥–∞–∂ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ + –∞—Ä—Ö–∏–≤–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å–æ—Ü —Å–µ—Ç—è—Ö.
----
–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–æ –≤ –ø–æ–¥—Å–∫–∞–∑–∫–µ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é {format_instructions}. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Å—Ç–∏–Ω–≥–µ: {input}
"""
rights_prompt = PromptTemplate.from_template(rights_prompt_text)
rights_parser = JsonOutputParser(pydantic_object=AdvertisingRights)

# –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–±
prob_prompt_text = """–ò–∑–≤–ª–µ–∫–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —è–≤–Ω–æ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–±—ã. 
–ò–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –≤—Å–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–æ–ª–µ–π –∏ –¥—Ä—É–≥–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –±–ª–æ–∫–∏. –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Ç–µ–∫—Å—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç 
–±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–∫—Ç–µ—Ä–∞–º–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Å–∞–º–æ–ø—Ä–æ–±. –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏ "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–æ –≤ –ø–æ–¥—Å–∫–∞–∑–∫–µ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é 
{format_instructions}. –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Å—Ç–∏–Ω–≥–æ–º: {input}"""
prob_prompt = PromptTemplate.from_template(prob_prompt_text)
prob_parser = JsonOutputParser(pydantic_object=ProbeText)

model = ChatOpenAI(openai_api_key=OPENAI_API_KEY, temperature=0)


async def extract_json_from_string(input_string):
    try:
        input_string = input_string.replace('For troubleshooting, visit: https://python.langchain.com/docs/troubleshooting/errors/OUTPUT_PARSING_FAILURE', '')
        input_string = input_string.replace('Invalid json output:', '')
        input_string = input_string.replace(',\n}', '}').replace('\n', '')
        json_data = json.loads(input_string)
        return json_data
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON: {e}")
        return None


async def uniqueness_check(cast_text):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å –ñ–∞–∫–∫–∞—Ä–∞"""
    async def jaccard(x: set, y: set):
        shared = x.intersection(y)  # –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è —Ç–æ–∫–µ–Ω—ã
        return len(shared) / len(x.union(y))

    #  –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Ç–µ–∫—Å—Ç–æ–≤
    last_200_castings = await base.get_all_texts()
    for t in last_200_castings:
        first = set(t['casting_text'].split())
        second = set(cast_text.split())
        uniq = await jaccard(first, second)
        if uniq > 0.8:
            return False
    return True


async def get_casting_data(casting_msg: str):
    """–ü–µ—Ä–≤–∞—è —Ü–µ–ø–æ—á–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Å—Ç–∏–Ω–≥–µ. –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç, —Ç–æ –≤—Ç–æ—Ä–∞—è –¥–æ—Å—Ç–∞–µ—Ç –µ–µ –∏
    –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç, –∞ —Ç—Ä–µ—Ç—å—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –∫–∞—Å—Ç–∏–Ω–≥—É, —á–µ—Ç–≤–µ—Ä—Ç–∞—è –¥–æ—Å—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –∏ –ø—Ä–∞–≤–∏–ª–∞–º
    –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫, –ø—è—Ç–∞—è –¥–æ—Å—Ç–∞–µ—Ç –ø—Ä–∞–≤–∞ –∏–∑ –∫–∞—Å—Ç–∏–Ω–≥–æ–≤ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã. –ö–∞–∂–¥—ã–π —ç—Ç–∞–ø –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ò–ò –æ–±–µ—Ä–Ω—É—Ç –≤
    –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª While True, –∞ –≤–Ω—É—Ç—Ä–∏ try except. –°–¥–µ–ª–∞–Ω–æ —ç—Ç–æ –ø–æ—Ç–æ–º—É, —á—Ç–æ –æ—á–µ–Ω—å —á–∞—Å—Ç–æ –≤—ã–ª–∞–∑–∏—Ç –æ—à–∏–±–∫–∞ output parser
    error –Ω–∞ —Ä–æ–≤–Ω–æ–º –º–µ—Å—Ç–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–∞—Å—Ç–∏–Ω–≥–∞
    while True:  # –¢–∞–∫ –∫–∞–∫ –æ—à–∏–±–∫–∞ output parser –æ—á–µ–Ω—å –ª—é–±–∏—Ç –≤—ã–ª–∞–∑–∏—Ç—å –Ω–∞ —Ä–æ–≤–Ω–æ–º –º–µ—Å—Ç–µ
        try:
            check_chain = check_prompt | model | check_parser
            check_response = await check_chain.ainvoke({'input': casting_msg,
                                                        'format_instructions': check_parser.get_format_instructions()})
            break
        except Exception as e:
            print(e)
    if check_response['it_casting']:

        # –ê —ç—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ID
        str_for_hashing = casting_msg[:100].encode()
        casting_hash = hashlib.sha256(str_for_hashing).hexdigest()
        if await uniqueness_check(casting_msg):  # –î–ª—è —É—á–µ—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–∞—Å—Ç–∏–Ω–≥–æ–≤ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å –ñ–∞–∫–∫–∞—Ä–∞
            while True:  # –ò–Ω–æ–≥–¥–∞ –≤—ã–ª–∞–∑–∏—Ç –æ—à–∏–±–∫–∞ KeyError: 'fee', –∞ —ç—Ç–æ –Ω–∞–º –Ω–µ–ª—å–∑—è
                try:
                    # –°–Ω–∞—á–∞–ª–∞ –¥–æ—Å—Ç–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Å—Ç–∏–Ω–≥–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–∞–∑–æ–±—å–µ–º –≤ –¥–≤–∞ —ç—Ç–∞–ø–∞,
                    # —á—Ç–æ –±—ã —É–º–µ–Ω—å—à–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏
                    while True:  # –¢–∞–∫ –∫–∞–∫ –æ—à–∏–±–∫–∞ output parser –æ—á–µ–Ω—å –ª—é–±–∏—Ç –≤—ã–ª–∞–∑–∏—Ç—å –Ω–∞ —Ä–æ–≤–Ω–æ–º –º–µ—Å—Ç–µ
                        try:
                            project_chain = project_prompt | model | project_parser
                            casting_data_1 = await project_chain.ainvoke({'input': casting_msg,
                                                                'format_instructions': project_parser.get_format_instructions()}
                                                                         )
                            break
                        except Exception as e:
                            # –ò–Ω–≥–æ–¥–∞, –æ—à–∏–±–∫–∞ –≤—ã–ª–∞–∑–∏—Ç –∏–∑ –ª–∏—à–Ω–µ–π –∑–∞–ø–∏—Ç–æ–π –≤ –∫–æ–Ω—Ü–µ.
                            # –° –ø–æ–º–æ—â—å—é —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏
                            casting_data_1 = await extract_json_from_string(str(e))
                            if casting_data_1:
                                break
                            print(e)
                    while True:  # –¢–∞–∫ –∫–∞–∫ –æ—à–∏–±–∫–∞ output parser –æ—á–µ–Ω—å –ª—é–±–∏—Ç –≤—ã–ª–∞–∑–∏—Ç—å –Ω–∞ —Ä–æ–≤–Ω–æ–º –º–µ—Å—Ç–µ
                        try:
                            chain = prompt | model | parser
                            casting_data = await chain.ainvoke({'input': casting_msg,
                                                                'format_instructions': parser.get_format_instructions()})
                            break
                        except Exception as e:
                            # –ò–Ω–≥–æ–¥–∞, –æ—à–∏–±–∫–∞ –≤—ã–ª–∞–∑–∏—Ç –∏–∑ –ª–∏—à–Ω–µ–π –∑–∞–ø–∏—Ç–æ–π –≤ –∫–æ–Ω—Ü–µ.
                            # –° –ø–æ–º–æ—â—å—é —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏
                            casting_data = await extract_json_from_string(str(e))
                            if casting_data:
                                break
                            print(e)
                    casting_config = []
                    casting_data.update(casting_data_1)
                    # –ò–∑ –ø–æ–ª—É—á–∏–≤—à–µ–π—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
                    for role in casting_data['role_description']:
                        input_text_for_prompt_2 = f'–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: {casting_data["project_type"]}\n'
                        input_text_for_prompt_2 += (f'–ü–æ–ª –∞–∫—Ç–µ—Ä–∞: {role["actor_sex"]}\n'
                                                    f'–í–æ–∑—Ä–∞—Å—Ç –∞–∫—Ç–µ—Ä–∞:{role["age_restrictions"]}\n'
                                                    f'–ì–æ–Ω–æ—Ä–∞—Ä: {role["fee"]}')
                        while True:  # –¢–∞–∫ –∫–∞–∫ –æ—à–∏–±–∫–∞ output parser –æ—á–µ–Ω—å –ª—é–±–∏—Ç –≤—ã–ª–∞–∑–∏—Ç—å –Ω–∞ —Ä–æ–≤–Ω–æ–º –º–µ—Å—Ç–µ
                            try:
                                chain_2 = prompt_2 | model | parser_2
                                casting_config.append(await chain_2.ainvoke({'input': input_text_for_prompt_2,
                                                                             'format_instructions': parser_2.get_format_instructions()}))
                                break
                            except Exception as e:
                                print(e)
                    break
                except KeyError as e:
                    print(e)
            while True:  # –¢–∞–∫ –∫–∞–∫ –æ—à–∏–±–∫–∞ output parser –æ—á–µ–Ω—å –ª—é–±–∏—Ç –≤—ã–ª–∞–∑–∏—Ç—å –Ω–∞ —Ä–æ–≤–Ω–æ–º –º–µ—Å—Ç–µ
                try:
                    chain_3 = prompt_3 | model | parser_3
                    casting_contacts = await chain_3.ainvoke({'input': casting_msg,
                                                              'format_instructions': parser_3.get_format_instructions()})
                    break
                except Exception as e:
                    # –ò–Ω–≥–æ–¥–∞, –æ—à–∏–±–∫–∞ –≤—ã–ª–∞–∑–∏—Ç –∏–∑ –ª–∏—à–Ω–µ–π –∑–∞–ø–∏—Ç–æ–π –≤ –∫–æ–Ω—Ü–µ.
                    # –° –ø–æ–º–æ—â—å—é —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏
                    casting_contacts = await extract_json_from_string(str(e))
                    if casting_contacts:
                        break
                    print(e)

            while True:  # –¢–∞–∫ –∫–∞–∫ –æ—à–∏–±–∫–∞ output parser –æ—á–µ–Ω—å –ª—é–±–∏—Ç –≤—ã–ª–∞–∑–∏—Ç—å –Ω–∞ —Ä–æ–≤–Ω–æ–º –º–µ—Å—Ç–µ
                try:
                    probe_chain = prob_prompt | model | prob_parser
                    casting_prob = await probe_chain.ainvoke({'input': casting_msg,
                                                              'format_instructions': prob_parser.get_format_instructions()})
                    break
                except Exception as e:
                    # –ò–Ω–≥–æ–¥–∞, –æ—à–∏–±–∫–∞ –≤—ã–ª–∞–∑–∏—Ç –∏–∑ –ª–∏—à–Ω–µ–π –∑–∞–ø–∏—Ç–æ–π –≤ –∫–æ–Ω—Ü–µ.
                    # –° –ø–æ–º–æ—â—å—é —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏
                    casting_prob = await extract_json_from_string(str(e))
                    if casting_prob:
                        break
                    print(e)

            casting_rights = None
            # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∫–ª–∞–º–∞, —Ç–æ –∏–∑–≤–ª–µ—á–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∞—Ö
            if casting_config[0]['project_type'] == 'ads':
                while True:  # –¢–∞–∫ –∫–∞–∫ –æ—à–∏–±–∫–∞ output parser –æ—á–µ–Ω—å –ª—é–±–∏—Ç –≤—ã–ª–∞–∑–∏—Ç—å –Ω–∞ —Ä–æ–≤–Ω–æ–º –º–µ—Å—Ç–µ
                    try:
                        rights_chain = rights_prompt | model | rights_parser
                        casting_rights = await rights_chain.ainvoke({'input': casting_msg,
                                                                     'format_instructions': rights_parser.get_format_instructions()})
                        break
                    except Exception as e:
                        # –ò–Ω–≥–æ–¥–∞, –æ—à–∏–±–∫–∞ –≤—ã–ª–∞–∑–∏—Ç –∏–∑ –ª–∏—à–Ω–µ–π –∑–∞–ø–∏—Ç–æ–π –≤ –∫–æ–Ω—Ü–µ.
                        # –° –ø–æ–º–æ—â—å—é —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏
                        casting_rights = await extract_json_from_string(str(e))
                        if casting_rights:
                            break
                        print(e)
            await base.add_new_text(casting_msg)
            # –î–∞–ª–µ–µ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—Ä–µ–∑–∞–Ω–Ω—É—é —á–∞—Å—Ç—å —Ö—ç—à–∞
            return casting_data, casting_config, casting_contacts, casting_rights, casting_prob, casting_hash[:10]
        else:
            return False
    else:
        with open('drop.log', 'a', encoding='utf-8') as file:
            file.write(
                f'\n==================\n{casting_msg}\n==================\n\n')
        return False
